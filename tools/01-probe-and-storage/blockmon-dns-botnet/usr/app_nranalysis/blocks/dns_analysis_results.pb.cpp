// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dns_analysis_results.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dns_analysis_results.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* dns_analysis_results_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  dns_analysis_results_reflection_ = NULL;
const ::google::protobuf::Descriptor* dns_analysis_results_DataMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  dns_analysis_results_DataMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* dns_analysis_results_ControlMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  dns_analysis_results_ControlMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_dns_5fanalysis_5fresults_2eproto() {
  protobuf_AddDesc_dns_5fanalysis_5fresults_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "dns_analysis_results.proto");
  GOOGLE_CHECK(file != NULL);
  dns_analysis_results_descriptor_ = file->message_type(0);
  static const int dns_analysis_results_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dns_analysis_results, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dns_analysis_results, control_),
  };
  dns_analysis_results_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      dns_analysis_results_descriptor_,
      dns_analysis_results::default_instance_,
      dns_analysis_results_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dns_analysis_results, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dns_analysis_results, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(dns_analysis_results));
  dns_analysis_results_DataMessage_descriptor_ = dns_analysis_results_descriptor_->nested_type(0);
  static const int dns_analysis_results_DataMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dns_analysis_results_DataMessage, dname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dns_analysis_results_DataMessage, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dns_analysis_results_DataMessage, whitelisted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dns_analysis_results_DataMessage, score_),
  };
  dns_analysis_results_DataMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      dns_analysis_results_DataMessage_descriptor_,
      dns_analysis_results_DataMessage::default_instance_,
      dns_analysis_results_DataMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dns_analysis_results_DataMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dns_analysis_results_DataMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(dns_analysis_results_DataMessage));
  dns_analysis_results_ControlMessage_descriptor_ = dns_analysis_results_descriptor_->nested_type(1);
  static const int dns_analysis_results_ControlMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dns_analysis_results_ControlMessage, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dns_analysis_results_ControlMessage, start_),
  };
  dns_analysis_results_ControlMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      dns_analysis_results_ControlMessage_descriptor_,
      dns_analysis_results_ControlMessage::default_instance_,
      dns_analysis_results_ControlMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dns_analysis_results_ControlMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dns_analysis_results_ControlMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(dns_analysis_results_ControlMessage));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_dns_5fanalysis_5fresults_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    dns_analysis_results_descriptor_, &dns_analysis_results::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    dns_analysis_results_DataMessage_descriptor_, &dns_analysis_results_DataMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    dns_analysis_results_ControlMessage_descriptor_, &dns_analysis_results_ControlMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_dns_5fanalysis_5fresults_2eproto() {
  delete dns_analysis_results::default_instance_;
  delete dns_analysis_results_reflection_;
  delete dns_analysis_results_DataMessage::default_instance_;
  delete dns_analysis_results_DataMessage_reflection_;
  delete dns_analysis_results_ControlMessage::default_instance_;
  delete dns_analysis_results_ControlMessage_reflection_;
}

void protobuf_AddDesc_dns_5fanalysis_5fresults_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032dns_analysis_results.proto\"\207\002\n\024dns_ana"
    "lysis_results\022/\n\004data\030\001 \001(\0132!.dns_analys"
    "is_results.DataMessage\0225\n\007control\030\002 \001(\0132"
    "$.dns_analysis_results.ControlMessage\032S\n"
    "\013DataMessage\022\r\n\005dname\030\001 \002(\t\022\021\n\ttimestamp"
    "\030\002 \002(\r\022\023\n\013whitelisted\030\003 \002(\010\022\r\n\005score\030\004 \002"
    "(\002\0322\n\016ControlMessage\022\021\n\ttimestamp\030\001 \002(\r\022"
    "\r\n\005start\030\002 \002(\010", 294);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dns_analysis_results.proto", &protobuf_RegisterTypes);
  dns_analysis_results::default_instance_ = new dns_analysis_results();
  dns_analysis_results_DataMessage::default_instance_ = new dns_analysis_results_DataMessage();
  dns_analysis_results_ControlMessage::default_instance_ = new dns_analysis_results_ControlMessage();
  dns_analysis_results::default_instance_->InitAsDefaultInstance();
  dns_analysis_results_DataMessage::default_instance_->InitAsDefaultInstance();
  dns_analysis_results_ControlMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_dns_5fanalysis_5fresults_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_dns_5fanalysis_5fresults_2eproto {
  StaticDescriptorInitializer_dns_5fanalysis_5fresults_2eproto() {
    protobuf_AddDesc_dns_5fanalysis_5fresults_2eproto();
  }
} static_descriptor_initializer_dns_5fanalysis_5fresults_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int dns_analysis_results_DataMessage::kDnameFieldNumber;
const int dns_analysis_results_DataMessage::kTimestampFieldNumber;
const int dns_analysis_results_DataMessage::kWhitelistedFieldNumber;
const int dns_analysis_results_DataMessage::kScoreFieldNumber;
#endif  // !_MSC_VER

dns_analysis_results_DataMessage::dns_analysis_results_DataMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void dns_analysis_results_DataMessage::InitAsDefaultInstance() {
}

dns_analysis_results_DataMessage::dns_analysis_results_DataMessage(const dns_analysis_results_DataMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void dns_analysis_results_DataMessage::SharedCtor() {
  _cached_size_ = 0;
  dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  timestamp_ = 0u;
  whitelisted_ = false;
  score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

dns_analysis_results_DataMessage::~dns_analysis_results_DataMessage() {
  SharedDtor();
}

void dns_analysis_results_DataMessage::SharedDtor() {
  if (dname_ != &::google::protobuf::internal::kEmptyString) {
    delete dname_;
  }
  if (this != default_instance_) {
  }
}

void dns_analysis_results_DataMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dns_analysis_results_DataMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return dns_analysis_results_DataMessage_descriptor_;
}

const dns_analysis_results_DataMessage& dns_analysis_results_DataMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dns_5fanalysis_5fresults_2eproto();
  return *default_instance_;
}

dns_analysis_results_DataMessage* dns_analysis_results_DataMessage::default_instance_ = NULL;

dns_analysis_results_DataMessage* dns_analysis_results_DataMessage::New() const {
  return new dns_analysis_results_DataMessage;
}

void dns_analysis_results_DataMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_dname()) {
      if (dname_ != &::google::protobuf::internal::kEmptyString) {
        dname_->clear();
      }
    }
    timestamp_ = 0u;
    whitelisted_ = false;
    score_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool dns_analysis_results_DataMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string dname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dname().data(), this->dname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_timestamp;
        break;
      }

      // required uint32 timestamp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_whitelisted;
        break;
      }

      // required bool whitelisted = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_whitelisted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &whitelisted_)));
          set_has_whitelisted();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_score;
        break;
      }

      // required float score = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void dns_analysis_results_DataMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string dname = 1;
  if (has_dname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dname().data(), this->dname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->dname(), output);
  }

  // required uint32 timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->timestamp(), output);
  }

  // required bool whitelisted = 3;
  if (has_whitelisted()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->whitelisted(), output);
  }

  // required float score = 4;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* dns_analysis_results_DataMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string dname = 1;
  if (has_dname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dname().data(), this->dname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dname(), target);
  }

  // required uint32 timestamp = 2;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->timestamp(), target);
  }

  // required bool whitelisted = 3;
  if (has_whitelisted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->whitelisted(), target);
  }

  // required float score = 4;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int dns_analysis_results_DataMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string dname = 1;
    if (has_dname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dname());
    }

    // required uint32 timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

    // required bool whitelisted = 3;
    if (has_whitelisted()) {
      total_size += 1 + 1;
    }

    // required float score = 4;
    if (has_score()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dns_analysis_results_DataMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const dns_analysis_results_DataMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const dns_analysis_results_DataMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void dns_analysis_results_DataMessage::MergeFrom(const dns_analysis_results_DataMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dname()) {
      set_dname(from.dname());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_whitelisted()) {
      set_whitelisted(from.whitelisted());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void dns_analysis_results_DataMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dns_analysis_results_DataMessage::CopyFrom(const dns_analysis_results_DataMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dns_analysis_results_DataMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void dns_analysis_results_DataMessage::Swap(dns_analysis_results_DataMessage* other) {
  if (other != this) {
    std::swap(dname_, other->dname_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(whitelisted_, other->whitelisted_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata dns_analysis_results_DataMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = dns_analysis_results_DataMessage_descriptor_;
  metadata.reflection = dns_analysis_results_DataMessage_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int dns_analysis_results_ControlMessage::kTimestampFieldNumber;
const int dns_analysis_results_ControlMessage::kStartFieldNumber;
#endif  // !_MSC_VER

dns_analysis_results_ControlMessage::dns_analysis_results_ControlMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void dns_analysis_results_ControlMessage::InitAsDefaultInstance() {
}

dns_analysis_results_ControlMessage::dns_analysis_results_ControlMessage(const dns_analysis_results_ControlMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void dns_analysis_results_ControlMessage::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = 0u;
  start_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

dns_analysis_results_ControlMessage::~dns_analysis_results_ControlMessage() {
  SharedDtor();
}

void dns_analysis_results_ControlMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void dns_analysis_results_ControlMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dns_analysis_results_ControlMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return dns_analysis_results_ControlMessage_descriptor_;
}

const dns_analysis_results_ControlMessage& dns_analysis_results_ControlMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dns_5fanalysis_5fresults_2eproto();
  return *default_instance_;
}

dns_analysis_results_ControlMessage* dns_analysis_results_ControlMessage::default_instance_ = NULL;

dns_analysis_results_ControlMessage* dns_analysis_results_ControlMessage::New() const {
  return new dns_analysis_results_ControlMessage;
}

void dns_analysis_results_ControlMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timestamp_ = 0u;
    start_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool dns_analysis_results_ControlMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 timestamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_start;
        break;
      }

      // required bool start = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &start_)));
          set_has_start();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void dns_analysis_results_ControlMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->timestamp(), output);
  }

  // required bool start = 2;
  if (has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->start(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* dns_analysis_results_ControlMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 timestamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->timestamp(), target);
  }

  // required bool start = 2;
  if (has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->start(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int dns_analysis_results_ControlMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

    // required bool start = 2;
    if (has_start()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dns_analysis_results_ControlMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const dns_analysis_results_ControlMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const dns_analysis_results_ControlMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void dns_analysis_results_ControlMessage::MergeFrom(const dns_analysis_results_ControlMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_start()) {
      set_start(from.start());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void dns_analysis_results_ControlMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dns_analysis_results_ControlMessage::CopyFrom(const dns_analysis_results_ControlMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dns_analysis_results_ControlMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void dns_analysis_results_ControlMessage::Swap(dns_analysis_results_ControlMessage* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(start_, other->start_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata dns_analysis_results_ControlMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = dns_analysis_results_ControlMessage_descriptor_;
  metadata.reflection = dns_analysis_results_ControlMessage_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int dns_analysis_results::kDataFieldNumber;
const int dns_analysis_results::kControlFieldNumber;
#endif  // !_MSC_VER

dns_analysis_results::dns_analysis_results()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void dns_analysis_results::InitAsDefaultInstance() {
  data_ = const_cast< ::dns_analysis_results_DataMessage*>(&::dns_analysis_results_DataMessage::default_instance());
  control_ = const_cast< ::dns_analysis_results_ControlMessage*>(&::dns_analysis_results_ControlMessage::default_instance());
}

dns_analysis_results::dns_analysis_results(const dns_analysis_results& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void dns_analysis_results::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
  control_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

dns_analysis_results::~dns_analysis_results() {
  SharedDtor();
}

void dns_analysis_results::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
    delete control_;
  }
}

void dns_analysis_results::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dns_analysis_results::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return dns_analysis_results_descriptor_;
}

const dns_analysis_results& dns_analysis_results::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dns_5fanalysis_5fresults_2eproto();
  return *default_instance_;
}

dns_analysis_results* dns_analysis_results::default_instance_ = NULL;

dns_analysis_results* dns_analysis_results::New() const {
  return new dns_analysis_results;
}

void dns_analysis_results::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != NULL) data_->::dns_analysis_results_DataMessage::Clear();
    }
    if (has_control()) {
      if (control_ != NULL) control_->::dns_analysis_results_ControlMessage::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool dns_analysis_results::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dns_analysis_results.DataMessage data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_control;
        break;
      }

      // optional .dns_analysis_results.ControlMessage control = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_control:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_control()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void dns_analysis_results::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .dns_analysis_results.DataMessage data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(), output);
  }

  // optional .dns_analysis_results.ControlMessage control = 2;
  if (has_control()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->control(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* dns_analysis_results::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .dns_analysis_results.DataMessage data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(), target);
  }

  // optional .dns_analysis_results.ControlMessage control = 2;
  if (has_control()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->control(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int dns_analysis_results::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .dns_analysis_results.DataMessage data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

    // optional .dns_analysis_results.ControlMessage control = 2;
    if (has_control()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->control());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dns_analysis_results::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const dns_analysis_results* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const dns_analysis_results*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void dns_analysis_results::MergeFrom(const dns_analysis_results& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      mutable_data()->::dns_analysis_results_DataMessage::MergeFrom(from.data());
    }
    if (from.has_control()) {
      mutable_control()->::dns_analysis_results_ControlMessage::MergeFrom(from.control());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void dns_analysis_results::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dns_analysis_results::CopyFrom(const dns_analysis_results& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dns_analysis_results::IsInitialized() const {

  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  if (has_control()) {
    if (!this->control().IsInitialized()) return false;
  }
  return true;
}

void dns_analysis_results::Swap(dns_analysis_results* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(control_, other->control_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata dns_analysis_results::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = dns_analysis_results_descriptor_;
  metadata.reflection = dns_analysis_results_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
