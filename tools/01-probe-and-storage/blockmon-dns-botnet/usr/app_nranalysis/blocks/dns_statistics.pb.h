// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dns_statistics.proto

#ifndef PROTOBUF_dns_5fstatistics_2eproto__INCLUDED
#define PROTOBUF_dns_5fstatistics_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_dns_5fstatistics_2eproto();
void protobuf_AssignDesc_dns_5fstatistics_2eproto();
void protobuf_ShutdownFile_dns_5fstatistics_2eproto();

class dns_statistics;
class dns_statistics_DataMessage;
class dns_statistics_ControlMessage;

// ===================================================================

class dns_statistics_DataMessage : public ::google::protobuf::Message {
 public:
  dns_statistics_DataMessage();
  virtual ~dns_statistics_DataMessage();
  
  dns_statistics_DataMessage(const dns_statistics_DataMessage& from);
  
  inline dns_statistics_DataMessage& operator=(const dns_statistics_DataMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const dns_statistics_DataMessage& default_instance();
  
  void Swap(dns_statistics_DataMessage* other);
  
  // implements Message ----------------------------------------------
  
  dns_statistics_DataMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const dns_statistics_DataMessage& from);
  void MergeFrom(const dns_statistics_DataMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // repeated string ip_address = 4;
  inline int ip_address_size() const;
  inline void clear_ip_address();
  static const int kIpAddressFieldNumber = 4;
  inline const ::std::string& ip_address(int index) const;
  inline ::std::string* mutable_ip_address(int index);
  inline void set_ip_address(int index, const ::std::string& value);
  inline void set_ip_address(int index, const char* value);
  inline void set_ip_address(int index, const char* value, size_t size);
  inline ::std::string* add_ip_address();
  inline void add_ip_address(const ::std::string& value);
  inline void add_ip_address(const char* value);
  inline void add_ip_address(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& ip_address() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_ip_address();
  
  // repeated uint32 a_records_counter = 5;
  inline int a_records_counter_size() const;
  inline void clear_a_records_counter();
  static const int kARecordsCounterFieldNumber = 5;
  inline ::google::protobuf::uint32 a_records_counter(int index) const;
  inline void set_a_records_counter(int index, ::google::protobuf::uint32 value);
  inline void add_a_records_counter(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      a_records_counter() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_a_records_counter();
  
  // optional float ip_distance_moving_avg = 7;
  inline bool has_ip_distance_moving_avg() const;
  inline void clear_ip_distance_moving_avg();
  static const int kIpDistanceMovingAvgFieldNumber = 7;
  inline float ip_distance_moving_avg() const;
  inline void set_ip_distance_moving_avg(float value);
  
  // optional float unique_ttls_counter = 8;
  inline bool has_unique_ttls_counter() const;
  inline void clear_unique_ttls_counter();
  static const int kUniqueTtlsCounterFieldNumber = 8;
  inline float unique_ttls_counter() const;
  inline void set_unique_ttls_counter(float value);
  
  // optional float ttl_moving_avg = 9;
  inline bool has_ttl_moving_avg() const;
  inline void clear_ttl_moving_avg();
  static const int kTtlMovingAvgFieldNumber = 9;
  inline float ttl_moving_avg() const;
  inline void set_ttl_moving_avg(float value);
  
  // optional float ttl_standard_dev = 10;
  inline bool has_ttl_standard_dev() const;
  inline void clear_ttl_standard_dev();
  static const int kTtlStandardDevFieldNumber = 10;
  inline float ttl_standard_dev() const;
  inline void set_ttl_standard_dev(float value);
  
  // optional uint32 a_queries_counter = 15;
  inline bool has_a_queries_counter() const;
  inline void clear_a_queries_counter();
  static const int kAQueriesCounterFieldNumber = 15;
  inline ::google::protobuf::uint32 a_queries_counter() const;
  inline void set_a_queries_counter(::google::protobuf::uint32 value);
  
  // optional uint32 dname_queries_counter = 16;
  inline bool has_dname_queries_counter() const;
  inline void clear_dname_queries_counter();
  static const int kDnameQueriesCounterFieldNumber = 16;
  inline ::google::protobuf::uint32 dname_queries_counter() const;
  inline void set_dname_queries_counter(::google::protobuf::uint32 value);
  
  // optional uint32 as_counter = 17;
  inline bool has_as_counter() const;
  inline void clear_as_counter();
  static const int kAsCounterFieldNumber = 17;
  inline ::google::protobuf::uint32 as_counter() const;
  inline void set_as_counter(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:dns_statistics.DataMessage)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_ip_distance_moving_avg();
  inline void clear_has_ip_distance_moving_avg();
  inline void set_has_unique_ttls_counter();
  inline void clear_has_unique_ttls_counter();
  inline void set_has_ttl_moving_avg();
  inline void clear_has_ttl_moving_avg();
  inline void set_has_ttl_standard_dev();
  inline void clear_has_ttl_standard_dev();
  inline void set_has_a_queries_counter();
  inline void clear_has_a_queries_counter();
  inline void set_has_dname_queries_counter();
  inline void clear_has_dname_queries_counter();
  inline void set_has_as_counter();
  inline void clear_has_as_counter();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> ip_address_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > a_records_counter_;
  float ip_distance_moving_avg_;
  float unique_ttls_counter_;
  float ttl_moving_avg_;
  float ttl_standard_dev_;
  ::google::protobuf::uint32 a_queries_counter_;
  ::google::protobuf::uint32 dname_queries_counter_;
  ::google::protobuf::uint32 as_counter_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];
  
  friend void  protobuf_AddDesc_dns_5fstatistics_2eproto();
  friend void protobuf_AssignDesc_dns_5fstatistics_2eproto();
  friend void protobuf_ShutdownFile_dns_5fstatistics_2eproto();
  
  void InitAsDefaultInstance();
  static dns_statistics_DataMessage* default_instance_;
};
// -------------------------------------------------------------------

class dns_statistics_ControlMessage : public ::google::protobuf::Message {
 public:
  dns_statistics_ControlMessage();
  virtual ~dns_statistics_ControlMessage();
  
  dns_statistics_ControlMessage(const dns_statistics_ControlMessage& from);
  
  inline dns_statistics_ControlMessage& operator=(const dns_statistics_ControlMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const dns_statistics_ControlMessage& default_instance();
  
  void Swap(dns_statistics_ControlMessage* other);
  
  // implements Message ----------------------------------------------
  
  dns_statistics_ControlMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const dns_statistics_ControlMessage& from);
  void MergeFrom(const dns_statistics_ControlMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 timestamp = 1;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  inline ::google::protobuf::uint32 timestamp() const;
  inline void set_timestamp(::google::protobuf::uint32 value);
  
  // required bool start = 2;
  inline bool has_start() const;
  inline void clear_start();
  static const int kStartFieldNumber = 2;
  inline bool start() const;
  inline void set_start(bool value);
  
  // @@protoc_insertion_point(class_scope:dns_statistics.ControlMessage)
 private:
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_start();
  inline void clear_has_start();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 timestamp_;
  bool start_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_dns_5fstatistics_2eproto();
  friend void protobuf_AssignDesc_dns_5fstatistics_2eproto();
  friend void protobuf_ShutdownFile_dns_5fstatistics_2eproto();
  
  void InitAsDefaultInstance();
  static dns_statistics_ControlMessage* default_instance_;
};
// -------------------------------------------------------------------

class dns_statistics : public ::google::protobuf::Message {
 public:
  dns_statistics();
  virtual ~dns_statistics();
  
  dns_statistics(const dns_statistics& from);
  
  inline dns_statistics& operator=(const dns_statistics& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const dns_statistics& default_instance();
  
  void Swap(dns_statistics* other);
  
  // implements Message ----------------------------------------------
  
  dns_statistics* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const dns_statistics& from);
  void MergeFrom(const dns_statistics& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef dns_statistics_DataMessage DataMessage;
  typedef dns_statistics_ControlMessage ControlMessage;
  
  // accessors -------------------------------------------------------
  
  // optional .dns_statistics.DataMessage data = 1;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::dns_statistics_DataMessage& data() const;
  inline ::dns_statistics_DataMessage* mutable_data();
  inline ::dns_statistics_DataMessage* release_data();
  
  // optional .dns_statistics.ControlMessage control = 2;
  inline bool has_control() const;
  inline void clear_control();
  static const int kControlFieldNumber = 2;
  inline const ::dns_statistics_ControlMessage& control() const;
  inline ::dns_statistics_ControlMessage* mutable_control();
  inline ::dns_statistics_ControlMessage* release_control();
  
  // @@protoc_insertion_point(class_scope:dns_statistics)
 private:
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_control();
  inline void clear_has_control();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::dns_statistics_DataMessage* data_;
  ::dns_statistics_ControlMessage* control_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_dns_5fstatistics_2eproto();
  friend void protobuf_AssignDesc_dns_5fstatistics_2eproto();
  friend void protobuf_ShutdownFile_dns_5fstatistics_2eproto();
  
  void InitAsDefaultInstance();
  static dns_statistics* default_instance_;
};
// ===================================================================


// ===================================================================

// dns_statistics_DataMessage

// required string name = 1;
inline bool dns_statistics_DataMessage::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void dns_statistics_DataMessage::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void dns_statistics_DataMessage::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void dns_statistics_DataMessage::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& dns_statistics_DataMessage::name() const {
  return *name_;
}
inline void dns_statistics_DataMessage::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void dns_statistics_DataMessage::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void dns_statistics_DataMessage::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* dns_statistics_DataMessage::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* dns_statistics_DataMessage::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated string ip_address = 4;
inline int dns_statistics_DataMessage::ip_address_size() const {
  return ip_address_.size();
}
inline void dns_statistics_DataMessage::clear_ip_address() {
  ip_address_.Clear();
}
inline const ::std::string& dns_statistics_DataMessage::ip_address(int index) const {
  return ip_address_.Get(index);
}
inline ::std::string* dns_statistics_DataMessage::mutable_ip_address(int index) {
  return ip_address_.Mutable(index);
}
inline void dns_statistics_DataMessage::set_ip_address(int index, const ::std::string& value) {
  ip_address_.Mutable(index)->assign(value);
}
inline void dns_statistics_DataMessage::set_ip_address(int index, const char* value) {
  ip_address_.Mutable(index)->assign(value);
}
inline void dns_statistics_DataMessage::set_ip_address(int index, const char* value, size_t size) {
  ip_address_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* dns_statistics_DataMessage::add_ip_address() {
  return ip_address_.Add();
}
inline void dns_statistics_DataMessage::add_ip_address(const ::std::string& value) {
  ip_address_.Add()->assign(value);
}
inline void dns_statistics_DataMessage::add_ip_address(const char* value) {
  ip_address_.Add()->assign(value);
}
inline void dns_statistics_DataMessage::add_ip_address(const char* value, size_t size) {
  ip_address_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
dns_statistics_DataMessage::ip_address() const {
  return ip_address_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
dns_statistics_DataMessage::mutable_ip_address() {
  return &ip_address_;
}

// repeated uint32 a_records_counter = 5;
inline int dns_statistics_DataMessage::a_records_counter_size() const {
  return a_records_counter_.size();
}
inline void dns_statistics_DataMessage::clear_a_records_counter() {
  a_records_counter_.Clear();
}
inline ::google::protobuf::uint32 dns_statistics_DataMessage::a_records_counter(int index) const {
  return a_records_counter_.Get(index);
}
inline void dns_statistics_DataMessage::set_a_records_counter(int index, ::google::protobuf::uint32 value) {
  a_records_counter_.Set(index, value);
}
inline void dns_statistics_DataMessage::add_a_records_counter(::google::protobuf::uint32 value) {
  a_records_counter_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
dns_statistics_DataMessage::a_records_counter() const {
  return a_records_counter_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
dns_statistics_DataMessage::mutable_a_records_counter() {
  return &a_records_counter_;
}

// optional float ip_distance_moving_avg = 7;
inline bool dns_statistics_DataMessage::has_ip_distance_moving_avg() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void dns_statistics_DataMessage::set_has_ip_distance_moving_avg() {
  _has_bits_[0] |= 0x00000008u;
}
inline void dns_statistics_DataMessage::clear_has_ip_distance_moving_avg() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void dns_statistics_DataMessage::clear_ip_distance_moving_avg() {
  ip_distance_moving_avg_ = 0;
  clear_has_ip_distance_moving_avg();
}
inline float dns_statistics_DataMessage::ip_distance_moving_avg() const {
  return ip_distance_moving_avg_;
}
inline void dns_statistics_DataMessage::set_ip_distance_moving_avg(float value) {
  set_has_ip_distance_moving_avg();
  ip_distance_moving_avg_ = value;
}

// optional float unique_ttls_counter = 8;
inline bool dns_statistics_DataMessage::has_unique_ttls_counter() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void dns_statistics_DataMessage::set_has_unique_ttls_counter() {
  _has_bits_[0] |= 0x00000010u;
}
inline void dns_statistics_DataMessage::clear_has_unique_ttls_counter() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void dns_statistics_DataMessage::clear_unique_ttls_counter() {
  unique_ttls_counter_ = 0;
  clear_has_unique_ttls_counter();
}
inline float dns_statistics_DataMessage::unique_ttls_counter() const {
  return unique_ttls_counter_;
}
inline void dns_statistics_DataMessage::set_unique_ttls_counter(float value) {
  set_has_unique_ttls_counter();
  unique_ttls_counter_ = value;
}

// optional float ttl_moving_avg = 9;
inline bool dns_statistics_DataMessage::has_ttl_moving_avg() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void dns_statistics_DataMessage::set_has_ttl_moving_avg() {
  _has_bits_[0] |= 0x00000020u;
}
inline void dns_statistics_DataMessage::clear_has_ttl_moving_avg() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void dns_statistics_DataMessage::clear_ttl_moving_avg() {
  ttl_moving_avg_ = 0;
  clear_has_ttl_moving_avg();
}
inline float dns_statistics_DataMessage::ttl_moving_avg() const {
  return ttl_moving_avg_;
}
inline void dns_statistics_DataMessage::set_ttl_moving_avg(float value) {
  set_has_ttl_moving_avg();
  ttl_moving_avg_ = value;
}

// optional float ttl_standard_dev = 10;
inline bool dns_statistics_DataMessage::has_ttl_standard_dev() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void dns_statistics_DataMessage::set_has_ttl_standard_dev() {
  _has_bits_[0] |= 0x00000040u;
}
inline void dns_statistics_DataMessage::clear_has_ttl_standard_dev() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void dns_statistics_DataMessage::clear_ttl_standard_dev() {
  ttl_standard_dev_ = 0;
  clear_has_ttl_standard_dev();
}
inline float dns_statistics_DataMessage::ttl_standard_dev() const {
  return ttl_standard_dev_;
}
inline void dns_statistics_DataMessage::set_ttl_standard_dev(float value) {
  set_has_ttl_standard_dev();
  ttl_standard_dev_ = value;
}

// optional uint32 a_queries_counter = 15;
inline bool dns_statistics_DataMessage::has_a_queries_counter() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void dns_statistics_DataMessage::set_has_a_queries_counter() {
  _has_bits_[0] |= 0x00000080u;
}
inline void dns_statistics_DataMessage::clear_has_a_queries_counter() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void dns_statistics_DataMessage::clear_a_queries_counter() {
  a_queries_counter_ = 0u;
  clear_has_a_queries_counter();
}
inline ::google::protobuf::uint32 dns_statistics_DataMessage::a_queries_counter() const {
  return a_queries_counter_;
}
inline void dns_statistics_DataMessage::set_a_queries_counter(::google::protobuf::uint32 value) {
  set_has_a_queries_counter();
  a_queries_counter_ = value;
}

// optional uint32 dname_queries_counter = 16;
inline bool dns_statistics_DataMessage::has_dname_queries_counter() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void dns_statistics_DataMessage::set_has_dname_queries_counter() {
  _has_bits_[0] |= 0x00000100u;
}
inline void dns_statistics_DataMessage::clear_has_dname_queries_counter() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void dns_statistics_DataMessage::clear_dname_queries_counter() {
  dname_queries_counter_ = 0u;
  clear_has_dname_queries_counter();
}
inline ::google::protobuf::uint32 dns_statistics_DataMessage::dname_queries_counter() const {
  return dname_queries_counter_;
}
inline void dns_statistics_DataMessage::set_dname_queries_counter(::google::protobuf::uint32 value) {
  set_has_dname_queries_counter();
  dname_queries_counter_ = value;
}

// optional uint32 as_counter = 17;
inline bool dns_statistics_DataMessage::has_as_counter() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void dns_statistics_DataMessage::set_has_as_counter() {
  _has_bits_[0] |= 0x00000200u;
}
inline void dns_statistics_DataMessage::clear_has_as_counter() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void dns_statistics_DataMessage::clear_as_counter() {
  as_counter_ = 0u;
  clear_has_as_counter();
}
inline ::google::protobuf::uint32 dns_statistics_DataMessage::as_counter() const {
  return as_counter_;
}
inline void dns_statistics_DataMessage::set_as_counter(::google::protobuf::uint32 value) {
  set_has_as_counter();
  as_counter_ = value;
}

// -------------------------------------------------------------------

// dns_statistics_ControlMessage

// required uint32 timestamp = 1;
inline bool dns_statistics_ControlMessage::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void dns_statistics_ControlMessage::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void dns_statistics_ControlMessage::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void dns_statistics_ControlMessage::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
inline ::google::protobuf::uint32 dns_statistics_ControlMessage::timestamp() const {
  return timestamp_;
}
inline void dns_statistics_ControlMessage::set_timestamp(::google::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
}

// required bool start = 2;
inline bool dns_statistics_ControlMessage::has_start() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void dns_statistics_ControlMessage::set_has_start() {
  _has_bits_[0] |= 0x00000002u;
}
inline void dns_statistics_ControlMessage::clear_has_start() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void dns_statistics_ControlMessage::clear_start() {
  start_ = false;
  clear_has_start();
}
inline bool dns_statistics_ControlMessage::start() const {
  return start_;
}
inline void dns_statistics_ControlMessage::set_start(bool value) {
  set_has_start();
  start_ = value;
}

// -------------------------------------------------------------------

// dns_statistics

// optional .dns_statistics.DataMessage data = 1;
inline bool dns_statistics::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void dns_statistics::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void dns_statistics::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void dns_statistics::clear_data() {
  if (data_ != NULL) data_->::dns_statistics_DataMessage::Clear();
  clear_has_data();
}
inline const ::dns_statistics_DataMessage& dns_statistics::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::dns_statistics_DataMessage* dns_statistics::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::dns_statistics_DataMessage;
  return data_;
}
inline ::dns_statistics_DataMessage* dns_statistics::release_data() {
  clear_has_data();
  ::dns_statistics_DataMessage* temp = data_;
  data_ = NULL;
  return temp;
}

// optional .dns_statistics.ControlMessage control = 2;
inline bool dns_statistics::has_control() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void dns_statistics::set_has_control() {
  _has_bits_[0] |= 0x00000002u;
}
inline void dns_statistics::clear_has_control() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void dns_statistics::clear_control() {
  if (control_ != NULL) control_->::dns_statistics_ControlMessage::Clear();
  clear_has_control();
}
inline const ::dns_statistics_ControlMessage& dns_statistics::control() const {
  return control_ != NULL ? *control_ : *default_instance_->control_;
}
inline ::dns_statistics_ControlMessage* dns_statistics::mutable_control() {
  set_has_control();
  if (control_ == NULL) control_ = new ::dns_statistics_ControlMessage;
  return control_;
}
inline ::dns_statistics_ControlMessage* dns_statistics::release_control() {
  clear_has_control();
  ::dns_statistics_ControlMessage* temp = control_;
  control_ = NULL;
  return temp;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_dns_5fstatistics_2eproto__INCLUDED
