// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ticket_dns.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ticket_dns.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ticket_dns_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ticket_dns_reflection_ = NULL;
const ::google::protobuf::Descriptor* ticket_dns_Header_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ticket_dns_Header_reflection_ = NULL;
const ::google::protobuf::Descriptor* ticket_dns_ResourceRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ticket_dns_ResourceRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* ticket_dns_Question_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ticket_dns_Question_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ticket_dns_Direction_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ticket_dns_DnsErrorCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ticket_dns_OPCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ticket_dns_RCODE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ticket_dns_Type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ticket_dns_DnsClass_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ticket_5fdns_2eproto() {
  protobuf_AddDesc_ticket_5fdns_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ticket_dns.proto");
  GOOGLE_CHECK(file != NULL);
  ticket_dns_descriptor_ = file->message_type(0);
  static const int ticket_dns_offsets_[31] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ticket_dns, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ticket_dns, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ticket_dns, imei_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ticket_dns, cell_plmnid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ticket_dns, cell_lac_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ticket_dns, cell_ci_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ticket_dns, cell_rac_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ticket_dns, rat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ticket_dns, phy_link_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ticket_dns, local_dev_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ticket_dns, remote_dev_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ticket_dns, tap_group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ticket_dns, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ticket_dns, qos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ticket_dns, core_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ticket_dns, mobile_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ticket_dns, layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ticket_dns, signaling_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ticket_dns, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ticket_dns, response_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ticket_dns, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ticket_dns, opcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ticket_dns, auth_ans_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ticket_dns, trunc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ticket_dns, rec_des_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ticket_dns, rec_avail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ticket_dns, rcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ticket_dns, questions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ticket_dns, answers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ticket_dns, authorities_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ticket_dns, additionals_),
  };
  ticket_dns_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ticket_dns_descriptor_,
      ticket_dns::default_instance_,
      ticket_dns_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ticket_dns, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ticket_dns, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ticket_dns));
  ticket_dns_Header_descriptor_ = ticket_dns_descriptor_->nested_type(0);
  static const int ticket_dns_Header_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ticket_dns_Header, cycle_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ticket_dns_Header, imsi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ticket_dns_Header, apn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ticket_dns_Header, nsapi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ticket_dns_Header, ctx_start_ts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ticket_dns_Header, server_ip_),
  };
  ticket_dns_Header_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ticket_dns_Header_descriptor_,
      ticket_dns_Header::default_instance_,
      ticket_dns_Header_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ticket_dns_Header, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ticket_dns_Header, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ticket_dns_Header));
  ticket_dns_ResourceRecord_descriptor_ = ticket_dns_descriptor_->nested_type(1);
  static const int ticket_dns_ResourceRecord_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ticket_dns_ResourceRecord, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ticket_dns_ResourceRecord, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ticket_dns_ResourceRecord, dns_class_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ticket_dns_ResourceRecord, ttl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ticket_dns_ResourceRecord, rdata_),
  };
  ticket_dns_ResourceRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ticket_dns_ResourceRecord_descriptor_,
      ticket_dns_ResourceRecord::default_instance_,
      ticket_dns_ResourceRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ticket_dns_ResourceRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ticket_dns_ResourceRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ticket_dns_ResourceRecord));
  ticket_dns_Question_descriptor_ = ticket_dns_descriptor_->nested_type(2);
  static const int ticket_dns_Question_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ticket_dns_Question, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ticket_dns_Question, dns_class_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ticket_dns_Question, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ticket_dns_Question, answer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ticket_dns_Question, authority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ticket_dns_Question, additional_),
  };
  ticket_dns_Question_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ticket_dns_Question_descriptor_,
      ticket_dns_Question::default_instance_,
      ticket_dns_Question_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ticket_dns_Question, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ticket_dns_Question, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ticket_dns_Question));
  ticket_dns_Direction_descriptor_ = ticket_dns_descriptor_->enum_type(0);
  ticket_dns_DnsErrorCode_descriptor_ = ticket_dns_descriptor_->enum_type(1);
  ticket_dns_OPCode_descriptor_ = ticket_dns_descriptor_->enum_type(2);
  ticket_dns_RCODE_descriptor_ = ticket_dns_descriptor_->enum_type(3);
  ticket_dns_Type_descriptor_ = ticket_dns_descriptor_->enum_type(4);
  ticket_dns_DnsClass_descriptor_ = ticket_dns_descriptor_->enum_type(5);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ticket_5fdns_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ticket_dns_descriptor_, &ticket_dns::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ticket_dns_Header_descriptor_, &ticket_dns_Header::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ticket_dns_ResourceRecord_descriptor_, &ticket_dns_ResourceRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ticket_dns_Question_descriptor_, &ticket_dns_Question::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ticket_5fdns_2eproto() {
  delete ticket_dns::default_instance_;
  delete ticket_dns_reflection_;
  delete ticket_dns_Header::default_instance_;
  delete ticket_dns_Header_reflection_;
  delete ticket_dns_ResourceRecord::default_instance_;
  delete ticket_dns_ResourceRecord_reflection_;
  delete ticket_dns_Question::default_instance_;
  delete ticket_dns_Question_reflection_;
}

void protobuf_AddDesc_ticket_5fdns_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020ticket_dns.proto\"\346\024\n\nticket_dns\022\"\n\006hea"
    "der\030\001 \001(\0132\022.ticket_dns.Header\022\021\n\ttimesta"
    "mp\030\002 \001(\004\022\014\n\004imei\030\004 \001(\004\022\023\n\013cell_plmnid\030\005 "
    "\001(\r\022\020\n\010cell_lac\030\006 \001(\r\022\017\n\007cell_ci\030\007 \001(\r\022\020"
    "\n\010cell_rac\030\010 \001(\r\022\013\n\003rat\030\t \001(\r\022\023\n\013phy_lin"
    "k_id\030\013 \001(\r\022\024\n\014local_dev_id\030\014 \001(\r\022\025\n\rremo"
    "te_dev_id\030\r \001(\r\022\024\n\014tap_group_id\030\016 \001(\r\022(\n"
    "\tdirection\030\017 \001(\0162\025.ticket_dns.Direction\022"
    "\013\n\003qos\030\020 \001(\r\022\021\n\tcore_port\030\036 \001(\r\022\023\n\013mobil"
    "e_port\030\037 \001(\r\022\r\n\005layer\030# \001(\r\022\021\n\tsignaling"
    "\030$ \001(\r\022,\n\nerror_code\030( \001(\0162\030.ticket_dns."
    "DnsErrorCode\022\025\n\rresponse_time\030) \001(\004\022\022\n\ns"
    "ession_id\0302 \001(\r\022\"\n\006opcode\0303 \001(\0162\022.ticket"
    "_dns.OPCode\022\020\n\010auth_ans\0304 \001(\r\022\r\n\005trunc\0305"
    " \001(\010\022\017\n\007rec_des\0306 \001(\010\022\021\n\trec_avail\0307 \001(\010"
    "\022 \n\005rcode\0308 \001(\0162\021.ticket_dns.RCODE\022\'\n\tqu"
    "estions\030< \003(\0132\024.ticket_dns.Question\022+\n\007a"
    "nswers\030= \003(\0132\032.ticket_dns.ResourceRecord"
    "\022/\n\013authorities\030> \003(\0132\032.ticket_dns.Resou"
    "rceRecord\022/\n\013additionals\030\? \003(\0132\032.ticket_"
    "dns.ResourceRecord\032o\n\006Header\022\022\n\ncycle_ti"
    "me\030\001 \001(\004\022\014\n\004imsi\030\002 \001(\004\022\013\n\003apn\030\003 \001(\t\022\r\n\005n"
    "sapi\030\004 \001(\r\022\024\n\014ctx_start_ts\030\005 \001(\004\022\021\n\tserv"
    "er_ip\030\006 \001(\r\032\203\001\n\016ResourceRecord\022\014\n\004name\030\001"
    " \001(\t\022\036\n\004type\030\002 \001(\0162\020.ticket_dns.Type\022\'\n\t"
    "dns_class\030\003 \001(\0162\024.ticket_dns.DnsClass\022\013\n"
    "\003ttl\030\004 \001(\r\022\r\n\005rdata\030\005 \001(\014\032\354\001\n\010Question\022\036"
    "\n\004type\030\001 \001(\0162\020.ticket_dns.Type\022\'\n\tdns_cl"
    "ass\030\002 \001(\0162\024.ticket_dns.DnsClass\022\014\n\004name\030"
    "\003 \001(\t\022*\n\006answer\030  \003(\0132\032.ticket_dns.Resou"
    "rceRecord\022-\n\tauthority\030! \003(\0132\032.ticket_dn"
    "s.ResourceRecord\022.\n\nadditional\030\" \003(\0132\032.t"
    "icket_dns.ResourceRecord\"\035\n\tDirection\022\006\n"
    "\002UP\020\000\022\010\n\004DOWN\020\001\"v\n\014DnsErrorCode\022\017\n\013SUCCE"
    "SSFULL\020\000\022\013\n\007TIMEOUT\020\001\022\032\n\026RESPONSE_WITHOU"
    "T_QUERY\020\002\022\030\n\024QUERY_RETRANSMISSION\020\003\022\022\n\016P"
    "ROTOCOL_ERROR\020\004\"C\n\006OPCode\022\t\n\005QUERY\020\000\022\n\n\006"
    "IQUERY\020\001\022\n\n\006STATUS\020\002\022\n\n\006NOTIFY\020\004\022\n\n\006UPDA"
    "TE\020\005\"l\n\005RCODE\022\013\n\007NOERROR\020\000\022\020\n\014FORMAT_ERR"
    "OR\020\001\022\022\n\016SERVER_FAILURE\020\002\022\016\n\nNAME_ERROR\020\003"
    "\022\023\n\017NOT_IMPLEMENTED\020\004\022\013\n\007REFUSED\020\005\"\317\007\n\004T"
    "ype\022\t\n\005DNS_A\020\001\022\n\n\006DNS_NS\020\002\022\n\n\006DNS_MD\020\003\022\n"
    "\n\006DNS_MF\020\004\022\r\n\tDNS_CNAME\020\005\022\013\n\007DNS_SOA\020\006\022\n"
    "\n\006DNS_MB\020\007\022\n\n\006DNS_MG\020\010\022\n\n\006DNS_MR\020\t\022\017\n\013DN"
    "S_NULL_RR\020\n\022\013\n\007DNS_WKS\020\013\022\013\n\007DNS_PTR\020\014\022\r\n"
    "\tDNS_HINFO\020\r\022\r\n\tDNS_MINFO\020\016\022\n\n\006DNS_MX\020\017\022"
    "\013\n\007DNS_TXT\020\020\022\n\n\006DNS_RP\020\021\022\r\n\tDNS_AFSDB\020\022\022"
    "\013\n\007DNS_X25\020\023\022\014\n\010DNS_ISDN\020\024\022\n\n\006DNS_RT\020\025\022\014"
    "\n\010DNS_NSAP\020\026\022\020\n\014DNS_NSAP_PTR\020\027\022\013\n\007DNS_SI"
    "G\020\030\022\013\n\007DNS_KEY\020\031\022\n\n\006DNS_PX\020\032\022\014\n\010DNS_GPOS"
    "\020\033\022\014\n\010DNS_AAAA\020\034\022\013\n\007DNS_LOC\020\035\022\013\n\007DNS_NXT"
    "\020\036\022\013\n\007DNS_EID\020\037\022\016\n\nDNS_NIMLOC\020 \022\013\n\007DNS_S"
    "RV\020!\022\014\n\010DNS_ATMA\020\"\022\r\n\tDNS_NAPTR\020#\022\n\n\006DNS"
    "_KX\020$\022\014\n\010DNS_CERT\020%\022\n\n\006DNS_A6\020&\022\r\n\tDNS_D"
    "NAME\020\'\022\014\n\010DNS_SINK\020(\022\013\n\007DNS_OPT\020)\022\013\n\007DNS"
    "_APL\020*\022\n\n\006DNS_DS\020+\022\r\n\tDNS_SSHFP\020,\022\020\n\014DNS"
    "_IPSECKEY\020-\022\r\n\tDNS_RRSIG\020.\022\014\n\010DNS_NSEC\020/"
    "\022\016\n\nDNS_DNSKEY\0200\022\r\n\tDNS_DHCID\0201\022\r\n\tDNS_N"
    "SEC3\0202\022\022\n\016DNS_NSEC3PARAM\0203\022\013\n\007DNS_HIP\0207\022"
    "\r\n\tDNS_NINFO\0208\022\014\n\010DNS_RKEY\0209\022\013\n\007DNS_SPF\020"
    "c\022\r\n\tDNS_UINFO\020d\022\013\n\007DNS_UID\020e\022\013\n\007DNS_GID"
    "\020f\022\016\n\nDNS_UNSPEC\020g\022\r\n\010DNS_TKEY\020\371\001\022\r\n\010DNS"
    "_TSIG\020\372\001\022\r\n\010DNS_IXFR\020\373\001\022\r\n\010DNS_AXFR\020\374\001\022\016"
    "\n\tDNS_MAILB\020\375\001\022\016\n\tDNS_MAILA\020\376\001\022\014\n\007DNS_AL"
    "L\020\377\001\022\014\n\006DNS_TA\020\200\200\002\022\r\n\007DNS_DLV\020\201\200\002\022\021\n\013DNS"
    "_UNKNOWN\020\377\377\003\"E\n\010DnsClass\022\006\n\002IN\020\001\022\006\n\002CH\020\003"
    "\022\006\n\002HS\020\004\022\020\n\013QCLASS_NONE\020\376\001\022\017\n\nQCLASS_ANY"
    "\020\377\001B\"\n\025at.ftw.darwin.ticketsB\007TicketsH\001", 2719);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ticket_dns.proto", &protobuf_RegisterTypes);
  ticket_dns::default_instance_ = new ticket_dns();
  ticket_dns_Header::default_instance_ = new ticket_dns_Header();
  ticket_dns_ResourceRecord::default_instance_ = new ticket_dns_ResourceRecord();
  ticket_dns_Question::default_instance_ = new ticket_dns_Question();
  ticket_dns::default_instance_->InitAsDefaultInstance();
  ticket_dns_Header::default_instance_->InitAsDefaultInstance();
  ticket_dns_ResourceRecord::default_instance_->InitAsDefaultInstance();
  ticket_dns_Question::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ticket_5fdns_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ticket_5fdns_2eproto {
  StaticDescriptorInitializer_ticket_5fdns_2eproto() {
    protobuf_AddDesc_ticket_5fdns_2eproto();
  }
} static_descriptor_initializer_ticket_5fdns_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* ticket_dns_Direction_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ticket_dns_Direction_descriptor_;
}
bool ticket_dns_Direction_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ticket_dns_Direction ticket_dns::UP;
const ticket_dns_Direction ticket_dns::DOWN;
const ticket_dns_Direction ticket_dns::Direction_MIN;
const ticket_dns_Direction ticket_dns::Direction_MAX;
const int ticket_dns::Direction_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* ticket_dns_DnsErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ticket_dns_DnsErrorCode_descriptor_;
}
bool ticket_dns_DnsErrorCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ticket_dns_DnsErrorCode ticket_dns::SUCCESSFULL;
const ticket_dns_DnsErrorCode ticket_dns::TIMEOUT;
const ticket_dns_DnsErrorCode ticket_dns::RESPONSE_WITHOUT_QUERY;
const ticket_dns_DnsErrorCode ticket_dns::QUERY_RETRANSMISSION;
const ticket_dns_DnsErrorCode ticket_dns::PROTOCOL_ERROR;
const ticket_dns_DnsErrorCode ticket_dns::DnsErrorCode_MIN;
const ticket_dns_DnsErrorCode ticket_dns::DnsErrorCode_MAX;
const int ticket_dns::DnsErrorCode_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* ticket_dns_OPCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ticket_dns_OPCode_descriptor_;
}
bool ticket_dns_OPCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ticket_dns_OPCode ticket_dns::QUERY;
const ticket_dns_OPCode ticket_dns::IQUERY;
const ticket_dns_OPCode ticket_dns::STATUS;
const ticket_dns_OPCode ticket_dns::NOTIFY;
const ticket_dns_OPCode ticket_dns::UPDATE;
const ticket_dns_OPCode ticket_dns::OPCode_MIN;
const ticket_dns_OPCode ticket_dns::OPCode_MAX;
const int ticket_dns::OPCode_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* ticket_dns_RCODE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ticket_dns_RCODE_descriptor_;
}
bool ticket_dns_RCODE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ticket_dns_RCODE ticket_dns::NOERROR;
const ticket_dns_RCODE ticket_dns::FORMAT_ERROR;
const ticket_dns_RCODE ticket_dns::SERVER_FAILURE;
const ticket_dns_RCODE ticket_dns::NAME_ERROR;
const ticket_dns_RCODE ticket_dns::NOT_IMPLEMENTED;
const ticket_dns_RCODE ticket_dns::REFUSED;
const ticket_dns_RCODE ticket_dns::RCODE_MIN;
const ticket_dns_RCODE ticket_dns::RCODE_MAX;
const int ticket_dns::RCODE_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* ticket_dns_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ticket_dns_Type_descriptor_;
}
bool ticket_dns_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 55:
    case 56:
    case 57:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 249:
    case 250:
    case 251:
    case 252:
    case 253:
    case 254:
    case 255:
    case 32768:
    case 32769:
    case 65535:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ticket_dns_Type ticket_dns::DNS_A;
const ticket_dns_Type ticket_dns::DNS_NS;
const ticket_dns_Type ticket_dns::DNS_MD;
const ticket_dns_Type ticket_dns::DNS_MF;
const ticket_dns_Type ticket_dns::DNS_CNAME;
const ticket_dns_Type ticket_dns::DNS_SOA;
const ticket_dns_Type ticket_dns::DNS_MB;
const ticket_dns_Type ticket_dns::DNS_MG;
const ticket_dns_Type ticket_dns::DNS_MR;
const ticket_dns_Type ticket_dns::DNS_NULL_RR;
const ticket_dns_Type ticket_dns::DNS_WKS;
const ticket_dns_Type ticket_dns::DNS_PTR;
const ticket_dns_Type ticket_dns::DNS_HINFO;
const ticket_dns_Type ticket_dns::DNS_MINFO;
const ticket_dns_Type ticket_dns::DNS_MX;
const ticket_dns_Type ticket_dns::DNS_TXT;
const ticket_dns_Type ticket_dns::DNS_RP;
const ticket_dns_Type ticket_dns::DNS_AFSDB;
const ticket_dns_Type ticket_dns::DNS_X25;
const ticket_dns_Type ticket_dns::DNS_ISDN;
const ticket_dns_Type ticket_dns::DNS_RT;
const ticket_dns_Type ticket_dns::DNS_NSAP;
const ticket_dns_Type ticket_dns::DNS_NSAP_PTR;
const ticket_dns_Type ticket_dns::DNS_SIG;
const ticket_dns_Type ticket_dns::DNS_KEY;
const ticket_dns_Type ticket_dns::DNS_PX;
const ticket_dns_Type ticket_dns::DNS_GPOS;
const ticket_dns_Type ticket_dns::DNS_AAAA;
const ticket_dns_Type ticket_dns::DNS_LOC;
const ticket_dns_Type ticket_dns::DNS_NXT;
const ticket_dns_Type ticket_dns::DNS_EID;
const ticket_dns_Type ticket_dns::DNS_NIMLOC;
const ticket_dns_Type ticket_dns::DNS_SRV;
const ticket_dns_Type ticket_dns::DNS_ATMA;
const ticket_dns_Type ticket_dns::DNS_NAPTR;
const ticket_dns_Type ticket_dns::DNS_KX;
const ticket_dns_Type ticket_dns::DNS_CERT;
const ticket_dns_Type ticket_dns::DNS_A6;
const ticket_dns_Type ticket_dns::DNS_DNAME;
const ticket_dns_Type ticket_dns::DNS_SINK;
const ticket_dns_Type ticket_dns::DNS_OPT;
const ticket_dns_Type ticket_dns::DNS_APL;
const ticket_dns_Type ticket_dns::DNS_DS;
const ticket_dns_Type ticket_dns::DNS_SSHFP;
const ticket_dns_Type ticket_dns::DNS_IPSECKEY;
const ticket_dns_Type ticket_dns::DNS_RRSIG;
const ticket_dns_Type ticket_dns::DNS_NSEC;
const ticket_dns_Type ticket_dns::DNS_DNSKEY;
const ticket_dns_Type ticket_dns::DNS_DHCID;
const ticket_dns_Type ticket_dns::DNS_NSEC3;
const ticket_dns_Type ticket_dns::DNS_NSEC3PARAM;
const ticket_dns_Type ticket_dns::DNS_HIP;
const ticket_dns_Type ticket_dns::DNS_NINFO;
const ticket_dns_Type ticket_dns::DNS_RKEY;
const ticket_dns_Type ticket_dns::DNS_SPF;
const ticket_dns_Type ticket_dns::DNS_UINFO;
const ticket_dns_Type ticket_dns::DNS_UID;
const ticket_dns_Type ticket_dns::DNS_GID;
const ticket_dns_Type ticket_dns::DNS_UNSPEC;
const ticket_dns_Type ticket_dns::DNS_TKEY;
const ticket_dns_Type ticket_dns::DNS_TSIG;
const ticket_dns_Type ticket_dns::DNS_IXFR;
const ticket_dns_Type ticket_dns::DNS_AXFR;
const ticket_dns_Type ticket_dns::DNS_MAILB;
const ticket_dns_Type ticket_dns::DNS_MAILA;
const ticket_dns_Type ticket_dns::DNS_ALL;
const ticket_dns_Type ticket_dns::DNS_TA;
const ticket_dns_Type ticket_dns::DNS_DLV;
const ticket_dns_Type ticket_dns::DNS_UNKNOWN;
const ticket_dns_Type ticket_dns::Type_MIN;
const ticket_dns_Type ticket_dns::Type_MAX;
const int ticket_dns::Type_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* ticket_dns_DnsClass_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ticket_dns_DnsClass_descriptor_;
}
bool ticket_dns_DnsClass_IsValid(int value) {
  switch(value) {
    case 1:
    case 3:
    case 4:
    case 254:
    case 255:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ticket_dns_DnsClass ticket_dns::IN;
const ticket_dns_DnsClass ticket_dns::CH;
const ticket_dns_DnsClass ticket_dns::HS;
const ticket_dns_DnsClass ticket_dns::QCLASS_NONE;
const ticket_dns_DnsClass ticket_dns::QCLASS_ANY;
const ticket_dns_DnsClass ticket_dns::DnsClass_MIN;
const ticket_dns_DnsClass ticket_dns::DnsClass_MAX;
const int ticket_dns::DnsClass_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ticket_dns_Header::kCycleTimeFieldNumber;
const int ticket_dns_Header::kImsiFieldNumber;
const int ticket_dns_Header::kApnFieldNumber;
const int ticket_dns_Header::kNsapiFieldNumber;
const int ticket_dns_Header::kCtxStartTsFieldNumber;
const int ticket_dns_Header::kServerIpFieldNumber;
#endif  // !_MSC_VER

ticket_dns_Header::ticket_dns_Header()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ticket_dns_Header::InitAsDefaultInstance() {
}

ticket_dns_Header::ticket_dns_Header(const ticket_dns_Header& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ticket_dns_Header::SharedCtor() {
  _cached_size_ = 0;
  cycle_time_ = GOOGLE_ULONGLONG(0);
  imsi_ = GOOGLE_ULONGLONG(0);
  apn_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nsapi_ = 0u;
  ctx_start_ts_ = GOOGLE_ULONGLONG(0);
  server_ip_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ticket_dns_Header::~ticket_dns_Header() {
  SharedDtor();
}

void ticket_dns_Header::SharedDtor() {
  if (apn_ != &::google::protobuf::internal::kEmptyString) {
    delete apn_;
  }
  if (this != default_instance_) {
  }
}

void ticket_dns_Header::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ticket_dns_Header::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ticket_dns_Header_descriptor_;
}

const ticket_dns_Header& ticket_dns_Header::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ticket_5fdns_2eproto();
  return *default_instance_;
}

ticket_dns_Header* ticket_dns_Header::default_instance_ = NULL;

ticket_dns_Header* ticket_dns_Header::New() const {
  return new ticket_dns_Header;
}

void ticket_dns_Header::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cycle_time_ = GOOGLE_ULONGLONG(0);
    imsi_ = GOOGLE_ULONGLONG(0);
    if (has_apn()) {
      if (apn_ != &::google::protobuf::internal::kEmptyString) {
        apn_->clear();
      }
    }
    nsapi_ = 0u;
    ctx_start_ts_ = GOOGLE_ULONGLONG(0);
    server_ip_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ticket_dns_Header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cycle_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cycle_time_)));
          set_has_cycle_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_imsi;
        break;
      }

      // optional uint64 imsi = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_imsi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &imsi_)));
          set_has_imsi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_apn;
        break;
      }

      // optional string apn = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_apn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_apn()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->apn().data(), this->apn().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_nsapi;
        break;
      }

      // optional uint32 nsapi = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nsapi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nsapi_)));
          set_has_nsapi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ctx_start_ts;
        break;
      }

      // optional uint64 ctx_start_ts = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ctx_start_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ctx_start_ts_)));
          set_has_ctx_start_ts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_server_ip;
        break;
      }

      // optional uint32 server_ip = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_ip_)));
          set_has_server_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ticket_dns_Header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cycle_time = 1;
  if (has_cycle_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cycle_time(), output);
  }

  // optional uint64 imsi = 2;
  if (has_imsi()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->imsi(), output);
  }

  // optional string apn = 3;
  if (has_apn()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->apn().data(), this->apn().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->apn(), output);
  }

  // optional uint32 nsapi = 4;
  if (has_nsapi()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->nsapi(), output);
  }

  // optional uint64 ctx_start_ts = 5;
  if (has_ctx_start_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->ctx_start_ts(), output);
  }

  // optional uint32 server_ip = 6;
  if (has_server_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->server_ip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ticket_dns_Header::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cycle_time = 1;
  if (has_cycle_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cycle_time(), target);
  }

  // optional uint64 imsi = 2;
  if (has_imsi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->imsi(), target);
  }

  // optional string apn = 3;
  if (has_apn()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->apn().data(), this->apn().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->apn(), target);
  }

  // optional uint32 nsapi = 4;
  if (has_nsapi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->nsapi(), target);
  }

  // optional uint64 ctx_start_ts = 5;
  if (has_ctx_start_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->ctx_start_ts(), target);
  }

  // optional uint32 server_ip = 6;
  if (has_server_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->server_ip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ticket_dns_Header::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cycle_time = 1;
    if (has_cycle_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cycle_time());
    }

    // optional uint64 imsi = 2;
    if (has_imsi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->imsi());
    }

    // optional string apn = 3;
    if (has_apn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->apn());
    }

    // optional uint32 nsapi = 4;
    if (has_nsapi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nsapi());
    }

    // optional uint64 ctx_start_ts = 5;
    if (has_ctx_start_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ctx_start_ts());
    }

    // optional uint32 server_ip = 6;
    if (has_server_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_ip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ticket_dns_Header::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ticket_dns_Header* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ticket_dns_Header*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ticket_dns_Header::MergeFrom(const ticket_dns_Header& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cycle_time()) {
      set_cycle_time(from.cycle_time());
    }
    if (from.has_imsi()) {
      set_imsi(from.imsi());
    }
    if (from.has_apn()) {
      set_apn(from.apn());
    }
    if (from.has_nsapi()) {
      set_nsapi(from.nsapi());
    }
    if (from.has_ctx_start_ts()) {
      set_ctx_start_ts(from.ctx_start_ts());
    }
    if (from.has_server_ip()) {
      set_server_ip(from.server_ip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ticket_dns_Header::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ticket_dns_Header::CopyFrom(const ticket_dns_Header& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ticket_dns_Header::IsInitialized() const {

  return true;
}

void ticket_dns_Header::Swap(ticket_dns_Header* other) {
  if (other != this) {
    std::swap(cycle_time_, other->cycle_time_);
    std::swap(imsi_, other->imsi_);
    std::swap(apn_, other->apn_);
    std::swap(nsapi_, other->nsapi_);
    std::swap(ctx_start_ts_, other->ctx_start_ts_);
    std::swap(server_ip_, other->server_ip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ticket_dns_Header::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ticket_dns_Header_descriptor_;
  metadata.reflection = ticket_dns_Header_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ticket_dns_ResourceRecord::kNameFieldNumber;
const int ticket_dns_ResourceRecord::kTypeFieldNumber;
const int ticket_dns_ResourceRecord::kDnsClassFieldNumber;
const int ticket_dns_ResourceRecord::kTtlFieldNumber;
const int ticket_dns_ResourceRecord::kRdataFieldNumber;
#endif  // !_MSC_VER

ticket_dns_ResourceRecord::ticket_dns_ResourceRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ticket_dns_ResourceRecord::InitAsDefaultInstance() {
}

ticket_dns_ResourceRecord::ticket_dns_ResourceRecord(const ticket_dns_ResourceRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ticket_dns_ResourceRecord::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 1;
  dns_class_ = 1;
  ttl_ = 0u;
  rdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ticket_dns_ResourceRecord::~ticket_dns_ResourceRecord() {
  SharedDtor();
}

void ticket_dns_ResourceRecord::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (rdata_ != &::google::protobuf::internal::kEmptyString) {
    delete rdata_;
  }
  if (this != default_instance_) {
  }
}

void ticket_dns_ResourceRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ticket_dns_ResourceRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ticket_dns_ResourceRecord_descriptor_;
}

const ticket_dns_ResourceRecord& ticket_dns_ResourceRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ticket_5fdns_2eproto();
  return *default_instance_;
}

ticket_dns_ResourceRecord* ticket_dns_ResourceRecord::default_instance_ = NULL;

ticket_dns_ResourceRecord* ticket_dns_ResourceRecord::New() const {
  return new ticket_dns_ResourceRecord;
}

void ticket_dns_ResourceRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    type_ = 1;
    dns_class_ = 1;
    ttl_ = 0u;
    if (has_rdata()) {
      if (rdata_ != &::google::protobuf::internal::kEmptyString) {
        rdata_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ticket_dns_ResourceRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .ticket_dns.Type type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ticket_dns_Type_IsValid(value)) {
            set_type(static_cast< ::ticket_dns_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dns_class;
        break;
      }

      // optional .ticket_dns.DnsClass dns_class = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dns_class:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ticket_dns_DnsClass_IsValid(value)) {
            set_dns_class(static_cast< ::ticket_dns_DnsClass >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ttl;
        break;
      }

      // optional uint32 ttl = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ttl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ttl_)));
          set_has_ttl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_rdata;
        break;
      }

      // optional bytes rdata = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_rdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ticket_dns_ResourceRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional .ticket_dns.Type type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional .ticket_dns.DnsClass dns_class = 3;
  if (has_dns_class()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->dns_class(), output);
  }

  // optional uint32 ttl = 4;
  if (has_ttl()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ttl(), output);
  }

  // optional bytes rdata = 5;
  if (has_rdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->rdata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ticket_dns_ResourceRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .ticket_dns.Type type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional .ticket_dns.DnsClass dns_class = 3;
  if (has_dns_class()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->dns_class(), target);
  }

  // optional uint32 ttl = 4;
  if (has_ttl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->ttl(), target);
  }

  // optional bytes rdata = 5;
  if (has_rdata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->rdata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ticket_dns_ResourceRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .ticket_dns.Type type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .ticket_dns.DnsClass dns_class = 3;
    if (has_dns_class()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->dns_class());
    }

    // optional uint32 ttl = 4;
    if (has_ttl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ttl());
    }

    // optional bytes rdata = 5;
    if (has_rdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->rdata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ticket_dns_ResourceRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ticket_dns_ResourceRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ticket_dns_ResourceRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ticket_dns_ResourceRecord::MergeFrom(const ticket_dns_ResourceRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_dns_class()) {
      set_dns_class(from.dns_class());
    }
    if (from.has_ttl()) {
      set_ttl(from.ttl());
    }
    if (from.has_rdata()) {
      set_rdata(from.rdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ticket_dns_ResourceRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ticket_dns_ResourceRecord::CopyFrom(const ticket_dns_ResourceRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ticket_dns_ResourceRecord::IsInitialized() const {

  return true;
}

void ticket_dns_ResourceRecord::Swap(ticket_dns_ResourceRecord* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(dns_class_, other->dns_class_);
    std::swap(ttl_, other->ttl_);
    std::swap(rdata_, other->rdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ticket_dns_ResourceRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ticket_dns_ResourceRecord_descriptor_;
  metadata.reflection = ticket_dns_ResourceRecord_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ticket_dns_Question::kTypeFieldNumber;
const int ticket_dns_Question::kDnsClassFieldNumber;
const int ticket_dns_Question::kNameFieldNumber;
const int ticket_dns_Question::kAnswerFieldNumber;
const int ticket_dns_Question::kAuthorityFieldNumber;
const int ticket_dns_Question::kAdditionalFieldNumber;
#endif  // !_MSC_VER

ticket_dns_Question::ticket_dns_Question()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ticket_dns_Question::InitAsDefaultInstance() {
}

ticket_dns_Question::ticket_dns_Question(const ticket_dns_Question& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ticket_dns_Question::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  dns_class_ = 1;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ticket_dns_Question::~ticket_dns_Question() {
  SharedDtor();
}

void ticket_dns_Question::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ticket_dns_Question::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ticket_dns_Question::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ticket_dns_Question_descriptor_;
}

const ticket_dns_Question& ticket_dns_Question::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ticket_5fdns_2eproto();
  return *default_instance_;
}

ticket_dns_Question* ticket_dns_Question::default_instance_ = NULL;

ticket_dns_Question* ticket_dns_Question::New() const {
  return new ticket_dns_Question;
}

void ticket_dns_Question::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    dns_class_ = 1;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  answer_.Clear();
  authority_.Clear();
  additional_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ticket_dns_Question::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ticket_dns.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ticket_dns_Type_IsValid(value)) {
            set_type(static_cast< ::ticket_dns_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dns_class;
        break;
      }

      // optional .ticket_dns.DnsClass dns_class = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dns_class:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ticket_dns_DnsClass_IsValid(value)) {
            set_dns_class(static_cast< ::ticket_dns_DnsClass >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_answer;
        break;
      }

      // repeated .ticket_dns.ResourceRecord answer = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_answer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_answer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_answer;
        if (input->ExpectTag(266)) goto parse_authority;
        break;
      }

      // repeated .ticket_dns.ResourceRecord authority = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_authority:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_authority()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(266)) goto parse_authority;
        if (input->ExpectTag(274)) goto parse_additional;
        break;
      }

      // repeated .ticket_dns.ResourceRecord additional = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_additional:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_additional()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(274)) goto parse_additional;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ticket_dns_Question::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ticket_dns.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .ticket_dns.DnsClass dns_class = 2;
  if (has_dns_class()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->dns_class(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // repeated .ticket_dns.ResourceRecord answer = 32;
  for (int i = 0; i < this->answer_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, this->answer(i), output);
  }

  // repeated .ticket_dns.ResourceRecord authority = 33;
  for (int i = 0; i < this->authority_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      33, this->authority(i), output);
  }

  // repeated .ticket_dns.ResourceRecord additional = 34;
  for (int i = 0; i < this->additional_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, this->additional(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ticket_dns_Question::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ticket_dns.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .ticket_dns.DnsClass dns_class = 2;
  if (has_dns_class()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->dns_class(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // repeated .ticket_dns.ResourceRecord answer = 32;
  for (int i = 0; i < this->answer_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        32, this->answer(i), target);
  }

  // repeated .ticket_dns.ResourceRecord authority = 33;
  for (int i = 0; i < this->authority_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        33, this->authority(i), target);
  }

  // repeated .ticket_dns.ResourceRecord additional = 34;
  for (int i = 0; i < this->additional_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        34, this->additional(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ticket_dns_Question::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ticket_dns.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .ticket_dns.DnsClass dns_class = 2;
    if (has_dns_class()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->dns_class());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated .ticket_dns.ResourceRecord answer = 32;
  total_size += 2 * this->answer_size();
  for (int i = 0; i < this->answer_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->answer(i));
  }

  // repeated .ticket_dns.ResourceRecord authority = 33;
  total_size += 2 * this->authority_size();
  for (int i = 0; i < this->authority_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->authority(i));
  }

  // repeated .ticket_dns.ResourceRecord additional = 34;
  total_size += 2 * this->additional_size();
  for (int i = 0; i < this->additional_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->additional(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ticket_dns_Question::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ticket_dns_Question* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ticket_dns_Question*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ticket_dns_Question::MergeFrom(const ticket_dns_Question& from) {
  GOOGLE_CHECK_NE(&from, this);
  answer_.MergeFrom(from.answer_);
  authority_.MergeFrom(from.authority_);
  additional_.MergeFrom(from.additional_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_dns_class()) {
      set_dns_class(from.dns_class());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ticket_dns_Question::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ticket_dns_Question::CopyFrom(const ticket_dns_Question& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ticket_dns_Question::IsInitialized() const {

  return true;
}

void ticket_dns_Question::Swap(ticket_dns_Question* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(dns_class_, other->dns_class_);
    std::swap(name_, other->name_);
    answer_.Swap(&other->answer_);
    authority_.Swap(&other->authority_);
    additional_.Swap(&other->additional_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ticket_dns_Question::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ticket_dns_Question_descriptor_;
  metadata.reflection = ticket_dns_Question_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ticket_dns::kHeaderFieldNumber;
const int ticket_dns::kTimestampFieldNumber;
const int ticket_dns::kImeiFieldNumber;
const int ticket_dns::kCellPlmnidFieldNumber;
const int ticket_dns::kCellLacFieldNumber;
const int ticket_dns::kCellCiFieldNumber;
const int ticket_dns::kCellRacFieldNumber;
const int ticket_dns::kRatFieldNumber;
const int ticket_dns::kPhyLinkIdFieldNumber;
const int ticket_dns::kLocalDevIdFieldNumber;
const int ticket_dns::kRemoteDevIdFieldNumber;
const int ticket_dns::kTapGroupIdFieldNumber;
const int ticket_dns::kDirectionFieldNumber;
const int ticket_dns::kQosFieldNumber;
const int ticket_dns::kCorePortFieldNumber;
const int ticket_dns::kMobilePortFieldNumber;
const int ticket_dns::kLayerFieldNumber;
const int ticket_dns::kSignalingFieldNumber;
const int ticket_dns::kErrorCodeFieldNumber;
const int ticket_dns::kResponseTimeFieldNumber;
const int ticket_dns::kSessionIdFieldNumber;
const int ticket_dns::kOpcodeFieldNumber;
const int ticket_dns::kAuthAnsFieldNumber;
const int ticket_dns::kTruncFieldNumber;
const int ticket_dns::kRecDesFieldNumber;
const int ticket_dns::kRecAvailFieldNumber;
const int ticket_dns::kRcodeFieldNumber;
const int ticket_dns::kQuestionsFieldNumber;
const int ticket_dns::kAnswersFieldNumber;
const int ticket_dns::kAuthoritiesFieldNumber;
const int ticket_dns::kAdditionalsFieldNumber;
#endif  // !_MSC_VER

ticket_dns::ticket_dns()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ticket_dns::InitAsDefaultInstance() {
  header_ = const_cast< ::ticket_dns_Header*>(&::ticket_dns_Header::default_instance());
}

ticket_dns::ticket_dns(const ticket_dns& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ticket_dns::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  timestamp_ = GOOGLE_ULONGLONG(0);
  imei_ = GOOGLE_ULONGLONG(0);
  cell_plmnid_ = 0u;
  cell_lac_ = 0u;
  cell_ci_ = 0u;
  cell_rac_ = 0u;
  rat_ = 0u;
  phy_link_id_ = 0u;
  local_dev_id_ = 0u;
  remote_dev_id_ = 0u;
  tap_group_id_ = 0u;
  direction_ = 0;
  qos_ = 0u;
  core_port_ = 0u;
  mobile_port_ = 0u;
  layer_ = 0u;
  signaling_ = 0u;
  error_code_ = 0;
  response_time_ = GOOGLE_ULONGLONG(0);
  session_id_ = 0u;
  opcode_ = 0;
  auth_ans_ = 0u;
  trunc_ = false;
  rec_des_ = false;
  rec_avail_ = false;
  rcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ticket_dns::~ticket_dns() {
  SharedDtor();
}

void ticket_dns::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void ticket_dns::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ticket_dns::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ticket_dns_descriptor_;
}

const ticket_dns& ticket_dns::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ticket_5fdns_2eproto();
  return *default_instance_;
}

ticket_dns* ticket_dns::default_instance_ = NULL;

ticket_dns* ticket_dns::New() const {
  return new ticket_dns;
}

void ticket_dns::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::ticket_dns_Header::Clear();
    }
    timestamp_ = GOOGLE_ULONGLONG(0);
    imei_ = GOOGLE_ULONGLONG(0);
    cell_plmnid_ = 0u;
    cell_lac_ = 0u;
    cell_ci_ = 0u;
    cell_rac_ = 0u;
    rat_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    phy_link_id_ = 0u;
    local_dev_id_ = 0u;
    remote_dev_id_ = 0u;
    tap_group_id_ = 0u;
    direction_ = 0;
    qos_ = 0u;
    core_port_ = 0u;
    mobile_port_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    layer_ = 0u;
    signaling_ = 0u;
    error_code_ = 0;
    response_time_ = GOOGLE_ULONGLONG(0);
    session_id_ = 0u;
    opcode_ = 0;
    auth_ans_ = 0u;
    trunc_ = false;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    rec_des_ = false;
    rec_avail_ = false;
    rcode_ = 0;
  }
  questions_.Clear();
  answers_.Clear();
  authorities_.Clear();
  additionals_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ticket_dns::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ticket_dns.Header header = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_timestamp;
        break;
      }

      // optional uint64 timestamp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_imei;
        break;
      }

      // optional uint64 imei = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_imei:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &imei_)));
          set_has_imei();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cell_plmnid;
        break;
      }

      // optional uint32 cell_plmnid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cell_plmnid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cell_plmnid_)));
          set_has_cell_plmnid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_cell_lac;
        break;
      }

      // optional uint32 cell_lac = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cell_lac:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cell_lac_)));
          set_has_cell_lac();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_cell_ci;
        break;
      }

      // optional uint32 cell_ci = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cell_ci:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cell_ci_)));
          set_has_cell_ci();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_cell_rac;
        break;
      }

      // optional uint32 cell_rac = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cell_rac:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cell_rac_)));
          set_has_cell_rac();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_rat;
        break;
      }

      // optional uint32 rat = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rat_)));
          set_has_rat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_phy_link_id;
        break;
      }

      // optional uint32 phy_link_id = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_phy_link_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phy_link_id_)));
          set_has_phy_link_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_local_dev_id;
        break;
      }

      // optional uint32 local_dev_id = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_local_dev_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &local_dev_id_)));
          set_has_local_dev_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_remote_dev_id;
        break;
      }

      // optional uint32 remote_dev_id = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remote_dev_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remote_dev_id_)));
          set_has_remote_dev_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_tap_group_id;
        break;
      }

      // optional uint32 tap_group_id = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tap_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tap_group_id_)));
          set_has_tap_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_direction;
        break;
      }

      // optional .ticket_dns.Direction direction = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_direction:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ticket_dns_Direction_IsValid(value)) {
            set_direction(static_cast< ::ticket_dns_Direction >(value));
          } else {
            mutable_unknown_fields()->AddVarint(15, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_qos;
        break;
      }

      // optional uint32 qos = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &qos_)));
          set_has_qos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_core_port;
        break;
      }

      // optional uint32 core_port = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_core_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &core_port_)));
          set_has_core_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_mobile_port;
        break;
      }

      // optional uint32 mobile_port = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mobile_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mobile_port_)));
          set_has_mobile_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_layer;
        break;
      }

      // optional uint32 layer = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_layer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &layer_)));
          set_has_layer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_signaling;
        break;
      }

      // optional uint32 signaling = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_signaling:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &signaling_)));
          set_has_signaling();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_error_code;
        break;
      }

      // optional .ticket_dns.DnsErrorCode error_code = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ticket_dns_DnsErrorCode_IsValid(value)) {
            set_error_code(static_cast< ::ticket_dns_DnsErrorCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(40, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(328)) goto parse_response_time;
        break;
      }

      // optional uint64 response_time = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_response_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &response_time_)));
          set_has_response_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_session_id;
        break;
      }

      // optional uint32 session_id = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(408)) goto parse_opcode;
        break;
      }

      // optional .ticket_dns.OPCode opcode = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opcode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ticket_dns_OPCode_IsValid(value)) {
            set_opcode(static_cast< ::ticket_dns_OPCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(51, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(416)) goto parse_auth_ans;
        break;
      }

      // optional uint32 auth_ans = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auth_ans:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &auth_ans_)));
          set_has_auth_ans();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(424)) goto parse_trunc;
        break;
      }

      // optional bool trunc = 53;
      case 53: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trunc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &trunc_)));
          set_has_trunc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(432)) goto parse_rec_des;
        break;
      }

      // optional bool rec_des = 54;
      case 54: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rec_des:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rec_des_)));
          set_has_rec_des();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(440)) goto parse_rec_avail;
        break;
      }

      // optional bool rec_avail = 55;
      case 55: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rec_avail:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rec_avail_)));
          set_has_rec_avail();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(448)) goto parse_rcode;
        break;
      }

      // optional .ticket_dns.RCODE rcode = 56;
      case 56: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rcode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ticket_dns_RCODE_IsValid(value)) {
            set_rcode(static_cast< ::ticket_dns_RCODE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(56, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(482)) goto parse_questions;
        break;
      }

      // repeated .ticket_dns.Question questions = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_questions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_questions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(482)) goto parse_questions;
        if (input->ExpectTag(490)) goto parse_answers;
        break;
      }

      // repeated .ticket_dns.ResourceRecord answers = 61;
      case 61: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_answers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_answers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(490)) goto parse_answers;
        if (input->ExpectTag(498)) goto parse_authorities;
        break;
      }

      // repeated .ticket_dns.ResourceRecord authorities = 62;
      case 62: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_authorities:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_authorities()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(498)) goto parse_authorities;
        if (input->ExpectTag(506)) goto parse_additionals;
        break;
      }

      // repeated .ticket_dns.ResourceRecord additionals = 63;
      case 63: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_additionals:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_additionals()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(506)) goto parse_additionals;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ticket_dns::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ticket_dns.Header header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // optional uint64 timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->timestamp(), output);
  }

  // optional uint64 imei = 4;
  if (has_imei()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->imei(), output);
  }

  // optional uint32 cell_plmnid = 5;
  if (has_cell_plmnid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->cell_plmnid(), output);
  }

  // optional uint32 cell_lac = 6;
  if (has_cell_lac()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->cell_lac(), output);
  }

  // optional uint32 cell_ci = 7;
  if (has_cell_ci()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->cell_ci(), output);
  }

  // optional uint32 cell_rac = 8;
  if (has_cell_rac()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->cell_rac(), output);
  }

  // optional uint32 rat = 9;
  if (has_rat()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->rat(), output);
  }

  // optional uint32 phy_link_id = 11;
  if (has_phy_link_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->phy_link_id(), output);
  }

  // optional uint32 local_dev_id = 12;
  if (has_local_dev_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->local_dev_id(), output);
  }

  // optional uint32 remote_dev_id = 13;
  if (has_remote_dev_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->remote_dev_id(), output);
  }

  // optional uint32 tap_group_id = 14;
  if (has_tap_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->tap_group_id(), output);
  }

  // optional .ticket_dns.Direction direction = 15;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->direction(), output);
  }

  // optional uint32 qos = 16;
  if (has_qos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->qos(), output);
  }

  // optional uint32 core_port = 30;
  if (has_core_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->core_port(), output);
  }

  // optional uint32 mobile_port = 31;
  if (has_mobile_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->mobile_port(), output);
  }

  // optional uint32 layer = 35;
  if (has_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(35, this->layer(), output);
  }

  // optional uint32 signaling = 36;
  if (has_signaling()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(36, this->signaling(), output);
  }

  // optional .ticket_dns.DnsErrorCode error_code = 40;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      40, this->error_code(), output);
  }

  // optional uint64 response_time = 41;
  if (has_response_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(41, this->response_time(), output);
  }

  // optional uint32 session_id = 50;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(50, this->session_id(), output);
  }

  // optional .ticket_dns.OPCode opcode = 51;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      51, this->opcode(), output);
  }

  // optional uint32 auth_ans = 52;
  if (has_auth_ans()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(52, this->auth_ans(), output);
  }

  // optional bool trunc = 53;
  if (has_trunc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(53, this->trunc(), output);
  }

  // optional bool rec_des = 54;
  if (has_rec_des()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(54, this->rec_des(), output);
  }

  // optional bool rec_avail = 55;
  if (has_rec_avail()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(55, this->rec_avail(), output);
  }

  // optional .ticket_dns.RCODE rcode = 56;
  if (has_rcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      56, this->rcode(), output);
  }

  // repeated .ticket_dns.Question questions = 60;
  for (int i = 0; i < this->questions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      60, this->questions(i), output);
  }

  // repeated .ticket_dns.ResourceRecord answers = 61;
  for (int i = 0; i < this->answers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      61, this->answers(i), output);
  }

  // repeated .ticket_dns.ResourceRecord authorities = 62;
  for (int i = 0; i < this->authorities_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      62, this->authorities(i), output);
  }

  // repeated .ticket_dns.ResourceRecord additionals = 63;
  for (int i = 0; i < this->additionals_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      63, this->additionals(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ticket_dns::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ticket_dns.Header header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // optional uint64 timestamp = 2;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->timestamp(), target);
  }

  // optional uint64 imei = 4;
  if (has_imei()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->imei(), target);
  }

  // optional uint32 cell_plmnid = 5;
  if (has_cell_plmnid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->cell_plmnid(), target);
  }

  // optional uint32 cell_lac = 6;
  if (has_cell_lac()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->cell_lac(), target);
  }

  // optional uint32 cell_ci = 7;
  if (has_cell_ci()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->cell_ci(), target);
  }

  // optional uint32 cell_rac = 8;
  if (has_cell_rac()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->cell_rac(), target);
  }

  // optional uint32 rat = 9;
  if (has_rat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->rat(), target);
  }

  // optional uint32 phy_link_id = 11;
  if (has_phy_link_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->phy_link_id(), target);
  }

  // optional uint32 local_dev_id = 12;
  if (has_local_dev_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->local_dev_id(), target);
  }

  // optional uint32 remote_dev_id = 13;
  if (has_remote_dev_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->remote_dev_id(), target);
  }

  // optional uint32 tap_group_id = 14;
  if (has_tap_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->tap_group_id(), target);
  }

  // optional .ticket_dns.Direction direction = 15;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->direction(), target);
  }

  // optional uint32 qos = 16;
  if (has_qos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->qos(), target);
  }

  // optional uint32 core_port = 30;
  if (has_core_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->core_port(), target);
  }

  // optional uint32 mobile_port = 31;
  if (has_mobile_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->mobile_port(), target);
  }

  // optional uint32 layer = 35;
  if (has_layer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(35, this->layer(), target);
  }

  // optional uint32 signaling = 36;
  if (has_signaling()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(36, this->signaling(), target);
  }

  // optional .ticket_dns.DnsErrorCode error_code = 40;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      40, this->error_code(), target);
  }

  // optional uint64 response_time = 41;
  if (has_response_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(41, this->response_time(), target);
  }

  // optional uint32 session_id = 50;
  if (has_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(50, this->session_id(), target);
  }

  // optional .ticket_dns.OPCode opcode = 51;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      51, this->opcode(), target);
  }

  // optional uint32 auth_ans = 52;
  if (has_auth_ans()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(52, this->auth_ans(), target);
  }

  // optional bool trunc = 53;
  if (has_trunc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(53, this->trunc(), target);
  }

  // optional bool rec_des = 54;
  if (has_rec_des()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(54, this->rec_des(), target);
  }

  // optional bool rec_avail = 55;
  if (has_rec_avail()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(55, this->rec_avail(), target);
  }

  // optional .ticket_dns.RCODE rcode = 56;
  if (has_rcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      56, this->rcode(), target);
  }

  // repeated .ticket_dns.Question questions = 60;
  for (int i = 0; i < this->questions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        60, this->questions(i), target);
  }

  // repeated .ticket_dns.ResourceRecord answers = 61;
  for (int i = 0; i < this->answers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        61, this->answers(i), target);
  }

  // repeated .ticket_dns.ResourceRecord authorities = 62;
  for (int i = 0; i < this->authorities_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        62, this->authorities(i), target);
  }

  // repeated .ticket_dns.ResourceRecord additionals = 63;
  for (int i = 0; i < this->additionals_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        63, this->additionals(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ticket_dns::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ticket_dns.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional uint64 timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

    // optional uint64 imei = 4;
    if (has_imei()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->imei());
    }

    // optional uint32 cell_plmnid = 5;
    if (has_cell_plmnid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cell_plmnid());
    }

    // optional uint32 cell_lac = 6;
    if (has_cell_lac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cell_lac());
    }

    // optional uint32 cell_ci = 7;
    if (has_cell_ci()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cell_ci());
    }

    // optional uint32 cell_rac = 8;
    if (has_cell_rac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cell_rac());
    }

    // optional uint32 rat = 9;
    if (has_rat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rat());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 phy_link_id = 11;
    if (has_phy_link_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->phy_link_id());
    }

    // optional uint32 local_dev_id = 12;
    if (has_local_dev_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->local_dev_id());
    }

    // optional uint32 remote_dev_id = 13;
    if (has_remote_dev_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->remote_dev_id());
    }

    // optional uint32 tap_group_id = 14;
    if (has_tap_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tap_group_id());
    }

    // optional .ticket_dns.Direction direction = 15;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->direction());
    }

    // optional uint32 qos = 16;
    if (has_qos()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->qos());
    }

    // optional uint32 core_port = 30;
    if (has_core_port()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->core_port());
    }

    // optional uint32 mobile_port = 31;
    if (has_mobile_port()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mobile_port());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 layer = 35;
    if (has_layer()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->layer());
    }

    // optional uint32 signaling = 36;
    if (has_signaling()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->signaling());
    }

    // optional .ticket_dns.DnsErrorCode error_code = 40;
    if (has_error_code()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
    }

    // optional uint64 response_time = 41;
    if (has_response_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->response_time());
    }

    // optional uint32 session_id = 50;
    if (has_session_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->session_id());
    }

    // optional .ticket_dns.OPCode opcode = 51;
    if (has_opcode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->opcode());
    }

    // optional uint32 auth_ans = 52;
    if (has_auth_ans()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->auth_ans());
    }

    // optional bool trunc = 53;
    if (has_trunc()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional bool rec_des = 54;
    if (has_rec_des()) {
      total_size += 2 + 1;
    }

    // optional bool rec_avail = 55;
    if (has_rec_avail()) {
      total_size += 2 + 1;
    }

    // optional .ticket_dns.RCODE rcode = 56;
    if (has_rcode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rcode());
    }

  }
  // repeated .ticket_dns.Question questions = 60;
  total_size += 2 * this->questions_size();
  for (int i = 0; i < this->questions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->questions(i));
  }

  // repeated .ticket_dns.ResourceRecord answers = 61;
  total_size += 2 * this->answers_size();
  for (int i = 0; i < this->answers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->answers(i));
  }

  // repeated .ticket_dns.ResourceRecord authorities = 62;
  total_size += 2 * this->authorities_size();
  for (int i = 0; i < this->authorities_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->authorities(i));
  }

  // repeated .ticket_dns.ResourceRecord additionals = 63;
  total_size += 2 * this->additionals_size();
  for (int i = 0; i < this->additionals_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->additionals(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ticket_dns::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ticket_dns* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ticket_dns*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ticket_dns::MergeFrom(const ticket_dns& from) {
  GOOGLE_CHECK_NE(&from, this);
  questions_.MergeFrom(from.questions_);
  answers_.MergeFrom(from.answers_);
  authorities_.MergeFrom(from.authorities_);
  additionals_.MergeFrom(from.additionals_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::ticket_dns_Header::MergeFrom(from.header());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_imei()) {
      set_imei(from.imei());
    }
    if (from.has_cell_plmnid()) {
      set_cell_plmnid(from.cell_plmnid());
    }
    if (from.has_cell_lac()) {
      set_cell_lac(from.cell_lac());
    }
    if (from.has_cell_ci()) {
      set_cell_ci(from.cell_ci());
    }
    if (from.has_cell_rac()) {
      set_cell_rac(from.cell_rac());
    }
    if (from.has_rat()) {
      set_rat(from.rat());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_phy_link_id()) {
      set_phy_link_id(from.phy_link_id());
    }
    if (from.has_local_dev_id()) {
      set_local_dev_id(from.local_dev_id());
    }
    if (from.has_remote_dev_id()) {
      set_remote_dev_id(from.remote_dev_id());
    }
    if (from.has_tap_group_id()) {
      set_tap_group_id(from.tap_group_id());
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
    if (from.has_qos()) {
      set_qos(from.qos());
    }
    if (from.has_core_port()) {
      set_core_port(from.core_port());
    }
    if (from.has_mobile_port()) {
      set_mobile_port(from.mobile_port());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_layer()) {
      set_layer(from.layer());
    }
    if (from.has_signaling()) {
      set_signaling(from.signaling());
    }
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_response_time()) {
      set_response_time(from.response_time());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_auth_ans()) {
      set_auth_ans(from.auth_ans());
    }
    if (from.has_trunc()) {
      set_trunc(from.trunc());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_rec_des()) {
      set_rec_des(from.rec_des());
    }
    if (from.has_rec_avail()) {
      set_rec_avail(from.rec_avail());
    }
    if (from.has_rcode()) {
      set_rcode(from.rcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ticket_dns::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ticket_dns::CopyFrom(const ticket_dns& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ticket_dns::IsInitialized() const {

  return true;
}

void ticket_dns::Swap(ticket_dns* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(imei_, other->imei_);
    std::swap(cell_plmnid_, other->cell_plmnid_);
    std::swap(cell_lac_, other->cell_lac_);
    std::swap(cell_ci_, other->cell_ci_);
    std::swap(cell_rac_, other->cell_rac_);
    std::swap(rat_, other->rat_);
    std::swap(phy_link_id_, other->phy_link_id_);
    std::swap(local_dev_id_, other->local_dev_id_);
    std::swap(remote_dev_id_, other->remote_dev_id_);
    std::swap(tap_group_id_, other->tap_group_id_);
    std::swap(direction_, other->direction_);
    std::swap(qos_, other->qos_);
    std::swap(core_port_, other->core_port_);
    std::swap(mobile_port_, other->mobile_port_);
    std::swap(layer_, other->layer_);
    std::swap(signaling_, other->signaling_);
    std::swap(error_code_, other->error_code_);
    std::swap(response_time_, other->response_time_);
    std::swap(session_id_, other->session_id_);
    std::swap(opcode_, other->opcode_);
    std::swap(auth_ans_, other->auth_ans_);
    std::swap(trunc_, other->trunc_);
    std::swap(rec_des_, other->rec_des_);
    std::swap(rec_avail_, other->rec_avail_);
    std::swap(rcode_, other->rcode_);
    questions_.Swap(&other->questions_);
    answers_.Swap(&other->answers_);
    authorities_.Swap(&other->authorities_);
    additionals_.Swap(&other->additionals_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ticket_dns::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ticket_dns_descriptor_;
  metadata.reflection = ticket_dns_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
