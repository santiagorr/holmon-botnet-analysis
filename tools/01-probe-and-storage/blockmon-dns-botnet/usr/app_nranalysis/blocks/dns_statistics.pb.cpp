// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dns_statistics.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dns_statistics.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* dns_statistics_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  dns_statistics_reflection_ = NULL;
const ::google::protobuf::Descriptor* dns_statistics_DataMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  dns_statistics_DataMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* dns_statistics_ControlMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  dns_statistics_ControlMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_dns_5fstatistics_2eproto() {
  protobuf_AddDesc_dns_5fstatistics_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "dns_statistics.proto");
  GOOGLE_CHECK(file != NULL);
  dns_statistics_descriptor_ = file->message_type(0);
  static const int dns_statistics_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dns_statistics, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dns_statistics, control_),
  };
  dns_statistics_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      dns_statistics_descriptor_,
      dns_statistics::default_instance_,
      dns_statistics_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dns_statistics, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dns_statistics, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(dns_statistics));
  dns_statistics_DataMessage_descriptor_ = dns_statistics_descriptor_->nested_type(0);
  static const int dns_statistics_DataMessage_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dns_statistics_DataMessage, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dns_statistics_DataMessage, ip_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dns_statistics_DataMessage, a_records_counter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dns_statistics_DataMessage, ip_distance_moving_avg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dns_statistics_DataMessage, unique_ttls_counter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dns_statistics_DataMessage, ttl_moving_avg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dns_statistics_DataMessage, ttl_standard_dev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dns_statistics_DataMessage, a_queries_counter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dns_statistics_DataMessage, dname_queries_counter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dns_statistics_DataMessage, as_counter_),
  };
  dns_statistics_DataMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      dns_statistics_DataMessage_descriptor_,
      dns_statistics_DataMessage::default_instance_,
      dns_statistics_DataMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dns_statistics_DataMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dns_statistics_DataMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(dns_statistics_DataMessage));
  dns_statistics_ControlMessage_descriptor_ = dns_statistics_descriptor_->nested_type(1);
  static const int dns_statistics_ControlMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dns_statistics_ControlMessage, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dns_statistics_ControlMessage, start_),
  };
  dns_statistics_ControlMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      dns_statistics_ControlMessage_descriptor_,
      dns_statistics_ControlMessage::default_instance_,
      dns_statistics_ControlMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dns_statistics_ControlMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dns_statistics_ControlMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(dns_statistics_ControlMessage));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_dns_5fstatistics_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    dns_statistics_descriptor_, &dns_statistics::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    dns_statistics_DataMessage_descriptor_, &dns_statistics_DataMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    dns_statistics_ControlMessage_descriptor_, &dns_statistics_ControlMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_dns_5fstatistics_2eproto() {
  delete dns_statistics::default_instance_;
  delete dns_statistics_reflection_;
  delete dns_statistics_DataMessage::default_instance_;
  delete dns_statistics_DataMessage_reflection_;
  delete dns_statistics_ControlMessage::default_instance_;
  delete dns_statistics_ControlMessage_reflection_;
}

void protobuf_AddDesc_dns_5fstatistics_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024dns_statistics.proto\"\252\003\n\016dns_statistic"
    "s\022)\n\004data\030\001 \001(\0132\033.dns_statistics.DataMes"
    "sage\022/\n\007control\030\002 \001(\0132\036.dns_statistics.C"
    "ontrolMessage\032\207\002\n\013DataMessage\022\014\n\004name\030\001 "
    "\002(\t\022\022\n\nip_address\030\004 \003(\t\022\031\n\021a_records_cou"
    "nter\030\005 \003(\r\022\036\n\026ip_distance_moving_avg\030\007 \001"
    "(\002\022\033\n\023unique_ttls_counter\030\010 \001(\002\022\026\n\016ttl_m"
    "oving_avg\030\t \001(\002\022\030\n\020ttl_standard_dev\030\n \001("
    "\002\022\031\n\021a_queries_counter\030\017 \001(\r\022\035\n\025dname_qu"
    "eries_counter\030\020 \001(\r\022\022\n\nas_counter\030\021 \001(\r\032"
    "2\n\016ControlMessage\022\021\n\ttimestamp\030\001 \002(\r\022\r\n\005"
    "start\030\002 \002(\010", 451);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dns_statistics.proto", &protobuf_RegisterTypes);
  dns_statistics::default_instance_ = new dns_statistics();
  dns_statistics_DataMessage::default_instance_ = new dns_statistics_DataMessage();
  dns_statistics_ControlMessage::default_instance_ = new dns_statistics_ControlMessage();
  dns_statistics::default_instance_->InitAsDefaultInstance();
  dns_statistics_DataMessage::default_instance_->InitAsDefaultInstance();
  dns_statistics_ControlMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_dns_5fstatistics_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_dns_5fstatistics_2eproto {
  StaticDescriptorInitializer_dns_5fstatistics_2eproto() {
    protobuf_AddDesc_dns_5fstatistics_2eproto();
  }
} static_descriptor_initializer_dns_5fstatistics_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int dns_statistics_DataMessage::kNameFieldNumber;
const int dns_statistics_DataMessage::kIpAddressFieldNumber;
const int dns_statistics_DataMessage::kARecordsCounterFieldNumber;
const int dns_statistics_DataMessage::kIpDistanceMovingAvgFieldNumber;
const int dns_statistics_DataMessage::kUniqueTtlsCounterFieldNumber;
const int dns_statistics_DataMessage::kTtlMovingAvgFieldNumber;
const int dns_statistics_DataMessage::kTtlStandardDevFieldNumber;
const int dns_statistics_DataMessage::kAQueriesCounterFieldNumber;
const int dns_statistics_DataMessage::kDnameQueriesCounterFieldNumber;
const int dns_statistics_DataMessage::kAsCounterFieldNumber;
#endif  // !_MSC_VER

dns_statistics_DataMessage::dns_statistics_DataMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void dns_statistics_DataMessage::InitAsDefaultInstance() {
}

dns_statistics_DataMessage::dns_statistics_DataMessage(const dns_statistics_DataMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void dns_statistics_DataMessage::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip_distance_moving_avg_ = 0;
  unique_ttls_counter_ = 0;
  ttl_moving_avg_ = 0;
  ttl_standard_dev_ = 0;
  a_queries_counter_ = 0u;
  dname_queries_counter_ = 0u;
  as_counter_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

dns_statistics_DataMessage::~dns_statistics_DataMessage() {
  SharedDtor();
}

void dns_statistics_DataMessage::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void dns_statistics_DataMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dns_statistics_DataMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return dns_statistics_DataMessage_descriptor_;
}

const dns_statistics_DataMessage& dns_statistics_DataMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dns_5fstatistics_2eproto();
  return *default_instance_;
}

dns_statistics_DataMessage* dns_statistics_DataMessage::default_instance_ = NULL;

dns_statistics_DataMessage* dns_statistics_DataMessage::New() const {
  return new dns_statistics_DataMessage;
}

void dns_statistics_DataMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    ip_distance_moving_avg_ = 0;
    unique_ttls_counter_ = 0;
    ttl_moving_avg_ = 0;
    ttl_standard_dev_ = 0;
    a_queries_counter_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    dname_queries_counter_ = 0u;
    as_counter_ = 0u;
  }
  ip_address_.Clear();
  a_records_counter_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool dns_statistics_DataMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ip_address;
        break;
      }

      // repeated string ip_address = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_ip_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip_address(this->ip_address_size() - 1).data(),
            this->ip_address(this->ip_address_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ip_address;
        if (input->ExpectTag(40)) goto parse_a_records_counter;
        break;
      }

      // repeated uint32 a_records_counter = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_a_records_counter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_a_records_counter())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_a_records_counter())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_a_records_counter;
        if (input->ExpectTag(61)) goto parse_ip_distance_moving_avg;
        break;
      }

      // optional float ip_distance_moving_avg = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ip_distance_moving_avg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ip_distance_moving_avg_)));
          set_has_ip_distance_moving_avg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_unique_ttls_counter;
        break;
      }

      // optional float unique_ttls_counter = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_unique_ttls_counter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &unique_ttls_counter_)));
          set_has_unique_ttls_counter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_ttl_moving_avg;
        break;
      }

      // optional float ttl_moving_avg = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ttl_moving_avg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ttl_moving_avg_)));
          set_has_ttl_moving_avg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_ttl_standard_dev;
        break;
      }

      // optional float ttl_standard_dev = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ttl_standard_dev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ttl_standard_dev_)));
          set_has_ttl_standard_dev();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_a_queries_counter;
        break;
      }

      // optional uint32 a_queries_counter = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_a_queries_counter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &a_queries_counter_)));
          set_has_a_queries_counter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_dname_queries_counter;
        break;
      }

      // optional uint32 dname_queries_counter = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dname_queries_counter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dname_queries_counter_)));
          set_has_dname_queries_counter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_as_counter;
        break;
      }

      // optional uint32 as_counter = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_as_counter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &as_counter_)));
          set_has_as_counter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void dns_statistics_DataMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // repeated string ip_address = 4;
  for (int i = 0; i < this->ip_address_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->ip_address(i).data(), this->ip_address(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->ip_address(i), output);
  }

  // repeated uint32 a_records_counter = 5;
  for (int i = 0; i < this->a_records_counter_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->a_records_counter(i), output);
  }

  // optional float ip_distance_moving_avg = 7;
  if (has_ip_distance_moving_avg()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->ip_distance_moving_avg(), output);
  }

  // optional float unique_ttls_counter = 8;
  if (has_unique_ttls_counter()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->unique_ttls_counter(), output);
  }

  // optional float ttl_moving_avg = 9;
  if (has_ttl_moving_avg()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->ttl_moving_avg(), output);
  }

  // optional float ttl_standard_dev = 10;
  if (has_ttl_standard_dev()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->ttl_standard_dev(), output);
  }

  // optional uint32 a_queries_counter = 15;
  if (has_a_queries_counter()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->a_queries_counter(), output);
  }

  // optional uint32 dname_queries_counter = 16;
  if (has_dname_queries_counter()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->dname_queries_counter(), output);
  }

  // optional uint32 as_counter = 17;
  if (has_as_counter()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->as_counter(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* dns_statistics_DataMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated string ip_address = 4;
  for (int i = 0; i < this->ip_address_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip_address(i).data(), this->ip_address(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->ip_address(i), target);
  }

  // repeated uint32 a_records_counter = 5;
  for (int i = 0; i < this->a_records_counter_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->a_records_counter(i), target);
  }

  // optional float ip_distance_moving_avg = 7;
  if (has_ip_distance_moving_avg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->ip_distance_moving_avg(), target);
  }

  // optional float unique_ttls_counter = 8;
  if (has_unique_ttls_counter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->unique_ttls_counter(), target);
  }

  // optional float ttl_moving_avg = 9;
  if (has_ttl_moving_avg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->ttl_moving_avg(), target);
  }

  // optional float ttl_standard_dev = 10;
  if (has_ttl_standard_dev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->ttl_standard_dev(), target);
  }

  // optional uint32 a_queries_counter = 15;
  if (has_a_queries_counter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->a_queries_counter(), target);
  }

  // optional uint32 dname_queries_counter = 16;
  if (has_dname_queries_counter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->dname_queries_counter(), target);
  }

  // optional uint32 as_counter = 17;
  if (has_as_counter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->as_counter(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int dns_statistics_DataMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional float ip_distance_moving_avg = 7;
    if (has_ip_distance_moving_avg()) {
      total_size += 1 + 4;
    }

    // optional float unique_ttls_counter = 8;
    if (has_unique_ttls_counter()) {
      total_size += 1 + 4;
    }

    // optional float ttl_moving_avg = 9;
    if (has_ttl_moving_avg()) {
      total_size += 1 + 4;
    }

    // optional float ttl_standard_dev = 10;
    if (has_ttl_standard_dev()) {
      total_size += 1 + 4;
    }

    // optional uint32 a_queries_counter = 15;
    if (has_a_queries_counter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->a_queries_counter());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 dname_queries_counter = 16;
    if (has_dname_queries_counter()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dname_queries_counter());
    }

    // optional uint32 as_counter = 17;
    if (has_as_counter()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->as_counter());
    }

  }
  // repeated string ip_address = 4;
  total_size += 1 * this->ip_address_size();
  for (int i = 0; i < this->ip_address_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->ip_address(i));
  }

  // repeated uint32 a_records_counter = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->a_records_counter_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->a_records_counter(i));
    }
    total_size += 1 * this->a_records_counter_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dns_statistics_DataMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const dns_statistics_DataMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const dns_statistics_DataMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void dns_statistics_DataMessage::MergeFrom(const dns_statistics_DataMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  ip_address_.MergeFrom(from.ip_address_);
  a_records_counter_.MergeFrom(from.a_records_counter_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_ip_distance_moving_avg()) {
      set_ip_distance_moving_avg(from.ip_distance_moving_avg());
    }
    if (from.has_unique_ttls_counter()) {
      set_unique_ttls_counter(from.unique_ttls_counter());
    }
    if (from.has_ttl_moving_avg()) {
      set_ttl_moving_avg(from.ttl_moving_avg());
    }
    if (from.has_ttl_standard_dev()) {
      set_ttl_standard_dev(from.ttl_standard_dev());
    }
    if (from.has_a_queries_counter()) {
      set_a_queries_counter(from.a_queries_counter());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_dname_queries_counter()) {
      set_dname_queries_counter(from.dname_queries_counter());
    }
    if (from.has_as_counter()) {
      set_as_counter(from.as_counter());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void dns_statistics_DataMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dns_statistics_DataMessage::CopyFrom(const dns_statistics_DataMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dns_statistics_DataMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void dns_statistics_DataMessage::Swap(dns_statistics_DataMessage* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    ip_address_.Swap(&other->ip_address_);
    a_records_counter_.Swap(&other->a_records_counter_);
    std::swap(ip_distance_moving_avg_, other->ip_distance_moving_avg_);
    std::swap(unique_ttls_counter_, other->unique_ttls_counter_);
    std::swap(ttl_moving_avg_, other->ttl_moving_avg_);
    std::swap(ttl_standard_dev_, other->ttl_standard_dev_);
    std::swap(a_queries_counter_, other->a_queries_counter_);
    std::swap(dname_queries_counter_, other->dname_queries_counter_);
    std::swap(as_counter_, other->as_counter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata dns_statistics_DataMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = dns_statistics_DataMessage_descriptor_;
  metadata.reflection = dns_statistics_DataMessage_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int dns_statistics_ControlMessage::kTimestampFieldNumber;
const int dns_statistics_ControlMessage::kStartFieldNumber;
#endif  // !_MSC_VER

dns_statistics_ControlMessage::dns_statistics_ControlMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void dns_statistics_ControlMessage::InitAsDefaultInstance() {
}

dns_statistics_ControlMessage::dns_statistics_ControlMessage(const dns_statistics_ControlMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void dns_statistics_ControlMessage::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = 0u;
  start_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

dns_statistics_ControlMessage::~dns_statistics_ControlMessage() {
  SharedDtor();
}

void dns_statistics_ControlMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void dns_statistics_ControlMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dns_statistics_ControlMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return dns_statistics_ControlMessage_descriptor_;
}

const dns_statistics_ControlMessage& dns_statistics_ControlMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dns_5fstatistics_2eproto();
  return *default_instance_;
}

dns_statistics_ControlMessage* dns_statistics_ControlMessage::default_instance_ = NULL;

dns_statistics_ControlMessage* dns_statistics_ControlMessage::New() const {
  return new dns_statistics_ControlMessage;
}

void dns_statistics_ControlMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timestamp_ = 0u;
    start_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool dns_statistics_ControlMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 timestamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_start;
        break;
      }

      // required bool start = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &start_)));
          set_has_start();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void dns_statistics_ControlMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->timestamp(), output);
  }

  // required bool start = 2;
  if (has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->start(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* dns_statistics_ControlMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 timestamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->timestamp(), target);
  }

  // required bool start = 2;
  if (has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->start(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int dns_statistics_ControlMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

    // required bool start = 2;
    if (has_start()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dns_statistics_ControlMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const dns_statistics_ControlMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const dns_statistics_ControlMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void dns_statistics_ControlMessage::MergeFrom(const dns_statistics_ControlMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_start()) {
      set_start(from.start());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void dns_statistics_ControlMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dns_statistics_ControlMessage::CopyFrom(const dns_statistics_ControlMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dns_statistics_ControlMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void dns_statistics_ControlMessage::Swap(dns_statistics_ControlMessage* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(start_, other->start_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata dns_statistics_ControlMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = dns_statistics_ControlMessage_descriptor_;
  metadata.reflection = dns_statistics_ControlMessage_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int dns_statistics::kDataFieldNumber;
const int dns_statistics::kControlFieldNumber;
#endif  // !_MSC_VER

dns_statistics::dns_statistics()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void dns_statistics::InitAsDefaultInstance() {
  data_ = const_cast< ::dns_statistics_DataMessage*>(&::dns_statistics_DataMessage::default_instance());
  control_ = const_cast< ::dns_statistics_ControlMessage*>(&::dns_statistics_ControlMessage::default_instance());
}

dns_statistics::dns_statistics(const dns_statistics& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void dns_statistics::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
  control_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

dns_statistics::~dns_statistics() {
  SharedDtor();
}

void dns_statistics::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
    delete control_;
  }
}

void dns_statistics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dns_statistics::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return dns_statistics_descriptor_;
}

const dns_statistics& dns_statistics::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dns_5fstatistics_2eproto();
  return *default_instance_;
}

dns_statistics* dns_statistics::default_instance_ = NULL;

dns_statistics* dns_statistics::New() const {
  return new dns_statistics;
}

void dns_statistics::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != NULL) data_->::dns_statistics_DataMessage::Clear();
    }
    if (has_control()) {
      if (control_ != NULL) control_->::dns_statistics_ControlMessage::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool dns_statistics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dns_statistics.DataMessage data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_control;
        break;
      }

      // optional .dns_statistics.ControlMessage control = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_control:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_control()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void dns_statistics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .dns_statistics.DataMessage data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(), output);
  }

  // optional .dns_statistics.ControlMessage control = 2;
  if (has_control()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->control(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* dns_statistics::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .dns_statistics.DataMessage data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(), target);
  }

  // optional .dns_statistics.ControlMessage control = 2;
  if (has_control()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->control(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int dns_statistics::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .dns_statistics.DataMessage data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

    // optional .dns_statistics.ControlMessage control = 2;
    if (has_control()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->control());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dns_statistics::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const dns_statistics* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const dns_statistics*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void dns_statistics::MergeFrom(const dns_statistics& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      mutable_data()->::dns_statistics_DataMessage::MergeFrom(from.data());
    }
    if (from.has_control()) {
      mutable_control()->::dns_statistics_ControlMessage::MergeFrom(from.control());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void dns_statistics::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dns_statistics::CopyFrom(const dns_statistics& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dns_statistics::IsInitialized() const {

  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  if (has_control()) {
    if (!this->control().IsInitialized()) return false;
  }
  return true;
}

void dns_statistics::Swap(dns_statistics* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(control_, other->control_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata dns_statistics::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = dns_statistics_descriptor_;
  metadata.reflection = dns_statistics_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
