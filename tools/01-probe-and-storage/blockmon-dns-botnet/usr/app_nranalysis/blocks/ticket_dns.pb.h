// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ticket_dns.proto

#ifndef PROTOBUF_ticket_5fdns_2eproto__INCLUDED
#define PROTOBUF_ticket_5fdns_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ticket_5fdns_2eproto();
void protobuf_AssignDesc_ticket_5fdns_2eproto();
void protobuf_ShutdownFile_ticket_5fdns_2eproto();

class ticket_dns;
class ticket_dns_Header;
class ticket_dns_ResourceRecord;
class ticket_dns_Question;

enum ticket_dns_Direction {
  ticket_dns_Direction_UP = 0,
  ticket_dns_Direction_DOWN = 1
};
bool ticket_dns_Direction_IsValid(int value);
const ticket_dns_Direction ticket_dns_Direction_Direction_MIN = ticket_dns_Direction_UP;
const ticket_dns_Direction ticket_dns_Direction_Direction_MAX = ticket_dns_Direction_DOWN;
const int ticket_dns_Direction_Direction_ARRAYSIZE = ticket_dns_Direction_Direction_MAX + 1;

const ::google::protobuf::EnumDescriptor* ticket_dns_Direction_descriptor();
inline const ::std::string& ticket_dns_Direction_Name(ticket_dns_Direction value) {
  return ::google::protobuf::internal::NameOfEnum(
    ticket_dns_Direction_descriptor(), value);
}
inline bool ticket_dns_Direction_Parse(
    const ::std::string& name, ticket_dns_Direction* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ticket_dns_Direction>(
    ticket_dns_Direction_descriptor(), name, value);
}
enum ticket_dns_DnsErrorCode {
  ticket_dns_DnsErrorCode_SUCCESSFULL = 0,
  ticket_dns_DnsErrorCode_TIMEOUT = 1,
  ticket_dns_DnsErrorCode_RESPONSE_WITHOUT_QUERY = 2,
  ticket_dns_DnsErrorCode_QUERY_RETRANSMISSION = 3,
  ticket_dns_DnsErrorCode_PROTOCOL_ERROR = 4
};
bool ticket_dns_DnsErrorCode_IsValid(int value);
const ticket_dns_DnsErrorCode ticket_dns_DnsErrorCode_DnsErrorCode_MIN = ticket_dns_DnsErrorCode_SUCCESSFULL;
const ticket_dns_DnsErrorCode ticket_dns_DnsErrorCode_DnsErrorCode_MAX = ticket_dns_DnsErrorCode_PROTOCOL_ERROR;
const int ticket_dns_DnsErrorCode_DnsErrorCode_ARRAYSIZE = ticket_dns_DnsErrorCode_DnsErrorCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ticket_dns_DnsErrorCode_descriptor();
inline const ::std::string& ticket_dns_DnsErrorCode_Name(ticket_dns_DnsErrorCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ticket_dns_DnsErrorCode_descriptor(), value);
}
inline bool ticket_dns_DnsErrorCode_Parse(
    const ::std::string& name, ticket_dns_DnsErrorCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ticket_dns_DnsErrorCode>(
    ticket_dns_DnsErrorCode_descriptor(), name, value);
}
enum ticket_dns_OPCode {
  ticket_dns_OPCode_QUERY = 0,
  ticket_dns_OPCode_IQUERY = 1,
  ticket_dns_OPCode_STATUS = 2,
  ticket_dns_OPCode_NOTIFY = 4,
  ticket_dns_OPCode_UPDATE = 5
};
bool ticket_dns_OPCode_IsValid(int value);
const ticket_dns_OPCode ticket_dns_OPCode_OPCode_MIN = ticket_dns_OPCode_QUERY;
const ticket_dns_OPCode ticket_dns_OPCode_OPCode_MAX = ticket_dns_OPCode_UPDATE;
const int ticket_dns_OPCode_OPCode_ARRAYSIZE = ticket_dns_OPCode_OPCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ticket_dns_OPCode_descriptor();
inline const ::std::string& ticket_dns_OPCode_Name(ticket_dns_OPCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ticket_dns_OPCode_descriptor(), value);
}
inline bool ticket_dns_OPCode_Parse(
    const ::std::string& name, ticket_dns_OPCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ticket_dns_OPCode>(
    ticket_dns_OPCode_descriptor(), name, value);
}
enum ticket_dns_RCODE {
  ticket_dns_RCODE_NOERROR = 0,
  ticket_dns_RCODE_FORMAT_ERROR = 1,
  ticket_dns_RCODE_SERVER_FAILURE = 2,
  ticket_dns_RCODE_NAME_ERROR = 3,
  ticket_dns_RCODE_NOT_IMPLEMENTED = 4,
  ticket_dns_RCODE_REFUSED = 5
};
bool ticket_dns_RCODE_IsValid(int value);
const ticket_dns_RCODE ticket_dns_RCODE_RCODE_MIN = ticket_dns_RCODE_NOERROR;
const ticket_dns_RCODE ticket_dns_RCODE_RCODE_MAX = ticket_dns_RCODE_REFUSED;
const int ticket_dns_RCODE_RCODE_ARRAYSIZE = ticket_dns_RCODE_RCODE_MAX + 1;

const ::google::protobuf::EnumDescriptor* ticket_dns_RCODE_descriptor();
inline const ::std::string& ticket_dns_RCODE_Name(ticket_dns_RCODE value) {
  return ::google::protobuf::internal::NameOfEnum(
    ticket_dns_RCODE_descriptor(), value);
}
inline bool ticket_dns_RCODE_Parse(
    const ::std::string& name, ticket_dns_RCODE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ticket_dns_RCODE>(
    ticket_dns_RCODE_descriptor(), name, value);
}
enum ticket_dns_Type {
  ticket_dns_Type_DNS_A = 1,
  ticket_dns_Type_DNS_NS = 2,
  ticket_dns_Type_DNS_MD = 3,
  ticket_dns_Type_DNS_MF = 4,
  ticket_dns_Type_DNS_CNAME = 5,
  ticket_dns_Type_DNS_SOA = 6,
  ticket_dns_Type_DNS_MB = 7,
  ticket_dns_Type_DNS_MG = 8,
  ticket_dns_Type_DNS_MR = 9,
  ticket_dns_Type_DNS_NULL_RR = 10,
  ticket_dns_Type_DNS_WKS = 11,
  ticket_dns_Type_DNS_PTR = 12,
  ticket_dns_Type_DNS_HINFO = 13,
  ticket_dns_Type_DNS_MINFO = 14,
  ticket_dns_Type_DNS_MX = 15,
  ticket_dns_Type_DNS_TXT = 16,
  ticket_dns_Type_DNS_RP = 17,
  ticket_dns_Type_DNS_AFSDB = 18,
  ticket_dns_Type_DNS_X25 = 19,
  ticket_dns_Type_DNS_ISDN = 20,
  ticket_dns_Type_DNS_RT = 21,
  ticket_dns_Type_DNS_NSAP = 22,
  ticket_dns_Type_DNS_NSAP_PTR = 23,
  ticket_dns_Type_DNS_SIG = 24,
  ticket_dns_Type_DNS_KEY = 25,
  ticket_dns_Type_DNS_PX = 26,
  ticket_dns_Type_DNS_GPOS = 27,
  ticket_dns_Type_DNS_AAAA = 28,
  ticket_dns_Type_DNS_LOC = 29,
  ticket_dns_Type_DNS_NXT = 30,
  ticket_dns_Type_DNS_EID = 31,
  ticket_dns_Type_DNS_NIMLOC = 32,
  ticket_dns_Type_DNS_SRV = 33,
  ticket_dns_Type_DNS_ATMA = 34,
  ticket_dns_Type_DNS_NAPTR = 35,
  ticket_dns_Type_DNS_KX = 36,
  ticket_dns_Type_DNS_CERT = 37,
  ticket_dns_Type_DNS_A6 = 38,
  ticket_dns_Type_DNS_DNAME = 39,
  ticket_dns_Type_DNS_SINK = 40,
  ticket_dns_Type_DNS_OPT = 41,
  ticket_dns_Type_DNS_APL = 42,
  ticket_dns_Type_DNS_DS = 43,
  ticket_dns_Type_DNS_SSHFP = 44,
  ticket_dns_Type_DNS_IPSECKEY = 45,
  ticket_dns_Type_DNS_RRSIG = 46,
  ticket_dns_Type_DNS_NSEC = 47,
  ticket_dns_Type_DNS_DNSKEY = 48,
  ticket_dns_Type_DNS_DHCID = 49,
  ticket_dns_Type_DNS_NSEC3 = 50,
  ticket_dns_Type_DNS_NSEC3PARAM = 51,
  ticket_dns_Type_DNS_HIP = 55,
  ticket_dns_Type_DNS_NINFO = 56,
  ticket_dns_Type_DNS_RKEY = 57,
  ticket_dns_Type_DNS_SPF = 99,
  ticket_dns_Type_DNS_UINFO = 100,
  ticket_dns_Type_DNS_UID = 101,
  ticket_dns_Type_DNS_GID = 102,
  ticket_dns_Type_DNS_UNSPEC = 103,
  ticket_dns_Type_DNS_TKEY = 249,
  ticket_dns_Type_DNS_TSIG = 250,
  ticket_dns_Type_DNS_IXFR = 251,
  ticket_dns_Type_DNS_AXFR = 252,
  ticket_dns_Type_DNS_MAILB = 253,
  ticket_dns_Type_DNS_MAILA = 254,
  ticket_dns_Type_DNS_ALL = 255,
  ticket_dns_Type_DNS_TA = 32768,
  ticket_dns_Type_DNS_DLV = 32769,
  ticket_dns_Type_DNS_UNKNOWN = 65535
};
bool ticket_dns_Type_IsValid(int value);
const ticket_dns_Type ticket_dns_Type_Type_MIN = ticket_dns_Type_DNS_A;
const ticket_dns_Type ticket_dns_Type_Type_MAX = ticket_dns_Type_DNS_UNKNOWN;
const int ticket_dns_Type_Type_ARRAYSIZE = ticket_dns_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* ticket_dns_Type_descriptor();
inline const ::std::string& ticket_dns_Type_Name(ticket_dns_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    ticket_dns_Type_descriptor(), value);
}
inline bool ticket_dns_Type_Parse(
    const ::std::string& name, ticket_dns_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ticket_dns_Type>(
    ticket_dns_Type_descriptor(), name, value);
}
enum ticket_dns_DnsClass {
  ticket_dns_DnsClass_IN = 1,
  ticket_dns_DnsClass_CH = 3,
  ticket_dns_DnsClass_HS = 4,
  ticket_dns_DnsClass_QCLASS_NONE = 254,
  ticket_dns_DnsClass_QCLASS_ANY = 255
};
bool ticket_dns_DnsClass_IsValid(int value);
const ticket_dns_DnsClass ticket_dns_DnsClass_DnsClass_MIN = ticket_dns_DnsClass_IN;
const ticket_dns_DnsClass ticket_dns_DnsClass_DnsClass_MAX = ticket_dns_DnsClass_QCLASS_ANY;
const int ticket_dns_DnsClass_DnsClass_ARRAYSIZE = ticket_dns_DnsClass_DnsClass_MAX + 1;

const ::google::protobuf::EnumDescriptor* ticket_dns_DnsClass_descriptor();
inline const ::std::string& ticket_dns_DnsClass_Name(ticket_dns_DnsClass value) {
  return ::google::protobuf::internal::NameOfEnum(
    ticket_dns_DnsClass_descriptor(), value);
}
inline bool ticket_dns_DnsClass_Parse(
    const ::std::string& name, ticket_dns_DnsClass* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ticket_dns_DnsClass>(
    ticket_dns_DnsClass_descriptor(), name, value);
}
// ===================================================================

class ticket_dns_Header : public ::google::protobuf::Message {
 public:
  ticket_dns_Header();
  virtual ~ticket_dns_Header();
  
  ticket_dns_Header(const ticket_dns_Header& from);
  
  inline ticket_dns_Header& operator=(const ticket_dns_Header& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ticket_dns_Header& default_instance();
  
  void Swap(ticket_dns_Header* other);
  
  // implements Message ----------------------------------------------
  
  ticket_dns_Header* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ticket_dns_Header& from);
  void MergeFrom(const ticket_dns_Header& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint64 cycle_time = 1;
  inline bool has_cycle_time() const;
  inline void clear_cycle_time();
  static const int kCycleTimeFieldNumber = 1;
  inline ::google::protobuf::uint64 cycle_time() const;
  inline void set_cycle_time(::google::protobuf::uint64 value);
  
  // optional uint64 imsi = 2;
  inline bool has_imsi() const;
  inline void clear_imsi();
  static const int kImsiFieldNumber = 2;
  inline ::google::protobuf::uint64 imsi() const;
  inline void set_imsi(::google::protobuf::uint64 value);
  
  // optional string apn = 3;
  inline bool has_apn() const;
  inline void clear_apn();
  static const int kApnFieldNumber = 3;
  inline const ::std::string& apn() const;
  inline void set_apn(const ::std::string& value);
  inline void set_apn(const char* value);
  inline void set_apn(const char* value, size_t size);
  inline ::std::string* mutable_apn();
  inline ::std::string* release_apn();
  
  // optional uint32 nsapi = 4;
  inline bool has_nsapi() const;
  inline void clear_nsapi();
  static const int kNsapiFieldNumber = 4;
  inline ::google::protobuf::uint32 nsapi() const;
  inline void set_nsapi(::google::protobuf::uint32 value);
  
  // optional uint64 ctx_start_ts = 5;
  inline bool has_ctx_start_ts() const;
  inline void clear_ctx_start_ts();
  static const int kCtxStartTsFieldNumber = 5;
  inline ::google::protobuf::uint64 ctx_start_ts() const;
  inline void set_ctx_start_ts(::google::protobuf::uint64 value);
  
  // optional uint32 server_ip = 6;
  inline bool has_server_ip() const;
  inline void clear_server_ip();
  static const int kServerIpFieldNumber = 6;
  inline ::google::protobuf::uint32 server_ip() const;
  inline void set_server_ip(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:ticket_dns.Header)
 private:
  inline void set_has_cycle_time();
  inline void clear_has_cycle_time();
  inline void set_has_imsi();
  inline void clear_has_imsi();
  inline void set_has_apn();
  inline void clear_has_apn();
  inline void set_has_nsapi();
  inline void clear_has_nsapi();
  inline void set_has_ctx_start_ts();
  inline void clear_has_ctx_start_ts();
  inline void set_has_server_ip();
  inline void clear_has_server_ip();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 cycle_time_;
  ::google::protobuf::uint64 imsi_;
  ::std::string* apn_;
  ::google::protobuf::uint64 ctx_start_ts_;
  ::google::protobuf::uint32 nsapi_;
  ::google::protobuf::uint32 server_ip_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_ticket_5fdns_2eproto();
  friend void protobuf_AssignDesc_ticket_5fdns_2eproto();
  friend void protobuf_ShutdownFile_ticket_5fdns_2eproto();
  
  void InitAsDefaultInstance();
  static ticket_dns_Header* default_instance_;
};
// -------------------------------------------------------------------

class ticket_dns_ResourceRecord : public ::google::protobuf::Message {
 public:
  ticket_dns_ResourceRecord();
  virtual ~ticket_dns_ResourceRecord();
  
  ticket_dns_ResourceRecord(const ticket_dns_ResourceRecord& from);
  
  inline ticket_dns_ResourceRecord& operator=(const ticket_dns_ResourceRecord& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ticket_dns_ResourceRecord& default_instance();
  
  void Swap(ticket_dns_ResourceRecord* other);
  
  // implements Message ----------------------------------------------
  
  ticket_dns_ResourceRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ticket_dns_ResourceRecord& from);
  void MergeFrom(const ticket_dns_ResourceRecord& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional .ticket_dns.Type type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::ticket_dns_Type type() const;
  inline void set_type(::ticket_dns_Type value);
  
  // optional .ticket_dns.DnsClass dns_class = 3;
  inline bool has_dns_class() const;
  inline void clear_dns_class();
  static const int kDnsClassFieldNumber = 3;
  inline ::ticket_dns_DnsClass dns_class() const;
  inline void set_dns_class(::ticket_dns_DnsClass value);
  
  // optional uint32 ttl = 4;
  inline bool has_ttl() const;
  inline void clear_ttl();
  static const int kTtlFieldNumber = 4;
  inline ::google::protobuf::uint32 ttl() const;
  inline void set_ttl(::google::protobuf::uint32 value);
  
  // optional bytes rdata = 5;
  inline bool has_rdata() const;
  inline void clear_rdata();
  static const int kRdataFieldNumber = 5;
  inline const ::std::string& rdata() const;
  inline void set_rdata(const ::std::string& value);
  inline void set_rdata(const char* value);
  inline void set_rdata(const void* value, size_t size);
  inline ::std::string* mutable_rdata();
  inline ::std::string* release_rdata();
  
  // @@protoc_insertion_point(class_scope:ticket_dns.ResourceRecord)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_dns_class();
  inline void clear_has_dns_class();
  inline void set_has_ttl();
  inline void clear_has_ttl();
  inline void set_has_rdata();
  inline void clear_has_rdata();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  int type_;
  int dns_class_;
  ::std::string* rdata_;
  ::google::protobuf::uint32 ttl_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_ticket_5fdns_2eproto();
  friend void protobuf_AssignDesc_ticket_5fdns_2eproto();
  friend void protobuf_ShutdownFile_ticket_5fdns_2eproto();
  
  void InitAsDefaultInstance();
  static ticket_dns_ResourceRecord* default_instance_;
};
// -------------------------------------------------------------------

class ticket_dns_Question : public ::google::protobuf::Message {
 public:
  ticket_dns_Question();
  virtual ~ticket_dns_Question();
  
  ticket_dns_Question(const ticket_dns_Question& from);
  
  inline ticket_dns_Question& operator=(const ticket_dns_Question& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ticket_dns_Question& default_instance();
  
  void Swap(ticket_dns_Question* other);
  
  // implements Message ----------------------------------------------
  
  ticket_dns_Question* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ticket_dns_Question& from);
  void MergeFrom(const ticket_dns_Question& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .ticket_dns.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::ticket_dns_Type type() const;
  inline void set_type(::ticket_dns_Type value);
  
  // optional .ticket_dns.DnsClass dns_class = 2;
  inline bool has_dns_class() const;
  inline void clear_dns_class();
  static const int kDnsClassFieldNumber = 2;
  inline ::ticket_dns_DnsClass dns_class() const;
  inline void set_dns_class(::ticket_dns_DnsClass value);
  
  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // repeated .ticket_dns.ResourceRecord answer = 32;
  inline int answer_size() const;
  inline void clear_answer();
  static const int kAnswerFieldNumber = 32;
  inline const ::ticket_dns_ResourceRecord& answer(int index) const;
  inline ::ticket_dns_ResourceRecord* mutable_answer(int index);
  inline ::ticket_dns_ResourceRecord* add_answer();
  inline const ::google::protobuf::RepeatedPtrField< ::ticket_dns_ResourceRecord >&
      answer() const;
  inline ::google::protobuf::RepeatedPtrField< ::ticket_dns_ResourceRecord >*
      mutable_answer();
  
  // repeated .ticket_dns.ResourceRecord authority = 33;
  inline int authority_size() const;
  inline void clear_authority();
  static const int kAuthorityFieldNumber = 33;
  inline const ::ticket_dns_ResourceRecord& authority(int index) const;
  inline ::ticket_dns_ResourceRecord* mutable_authority(int index);
  inline ::ticket_dns_ResourceRecord* add_authority();
  inline const ::google::protobuf::RepeatedPtrField< ::ticket_dns_ResourceRecord >&
      authority() const;
  inline ::google::protobuf::RepeatedPtrField< ::ticket_dns_ResourceRecord >*
      mutable_authority();
  
  // repeated .ticket_dns.ResourceRecord additional = 34;
  inline int additional_size() const;
  inline void clear_additional();
  static const int kAdditionalFieldNumber = 34;
  inline const ::ticket_dns_ResourceRecord& additional(int index) const;
  inline ::ticket_dns_ResourceRecord* mutable_additional(int index);
  inline ::ticket_dns_ResourceRecord* add_additional();
  inline const ::google::protobuf::RepeatedPtrField< ::ticket_dns_ResourceRecord >&
      additional() const;
  inline ::google::protobuf::RepeatedPtrField< ::ticket_dns_ResourceRecord >*
      mutable_additional();
  
  // @@protoc_insertion_point(class_scope:ticket_dns.Question)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_dns_class();
  inline void clear_has_dns_class();
  inline void set_has_name();
  inline void clear_has_name();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int type_;
  int dns_class_;
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::ticket_dns_ResourceRecord > answer_;
  ::google::protobuf::RepeatedPtrField< ::ticket_dns_ResourceRecord > authority_;
  ::google::protobuf::RepeatedPtrField< ::ticket_dns_ResourceRecord > additional_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_ticket_5fdns_2eproto();
  friend void protobuf_AssignDesc_ticket_5fdns_2eproto();
  friend void protobuf_ShutdownFile_ticket_5fdns_2eproto();
  
  void InitAsDefaultInstance();
  static ticket_dns_Question* default_instance_;
};
// -------------------------------------------------------------------

class ticket_dns : public ::google::protobuf::Message {
 public:
  ticket_dns();
  virtual ~ticket_dns();
  
  ticket_dns(const ticket_dns& from);
  
  inline ticket_dns& operator=(const ticket_dns& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ticket_dns& default_instance();
  
  void Swap(ticket_dns* other);
  
  // implements Message ----------------------------------------------
  
  ticket_dns* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ticket_dns& from);
  void MergeFrom(const ticket_dns& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef ticket_dns_Header Header;
  typedef ticket_dns_ResourceRecord ResourceRecord;
  typedef ticket_dns_Question Question;
  
  typedef ticket_dns_Direction Direction;
  static const Direction UP = ticket_dns_Direction_UP;
  static const Direction DOWN = ticket_dns_Direction_DOWN;
  static inline bool Direction_IsValid(int value) {
    return ticket_dns_Direction_IsValid(value);
  }
  static const Direction Direction_MIN =
    ticket_dns_Direction_Direction_MIN;
  static const Direction Direction_MAX =
    ticket_dns_Direction_Direction_MAX;
  static const int Direction_ARRAYSIZE =
    ticket_dns_Direction_Direction_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Direction_descriptor() {
    return ticket_dns_Direction_descriptor();
  }
  static inline const ::std::string& Direction_Name(Direction value) {
    return ticket_dns_Direction_Name(value);
  }
  static inline bool Direction_Parse(const ::std::string& name,
      Direction* value) {
    return ticket_dns_Direction_Parse(name, value);
  }
  
  typedef ticket_dns_DnsErrorCode DnsErrorCode;
  static const DnsErrorCode SUCCESSFULL = ticket_dns_DnsErrorCode_SUCCESSFULL;
  static const DnsErrorCode TIMEOUT = ticket_dns_DnsErrorCode_TIMEOUT;
  static const DnsErrorCode RESPONSE_WITHOUT_QUERY = ticket_dns_DnsErrorCode_RESPONSE_WITHOUT_QUERY;
  static const DnsErrorCode QUERY_RETRANSMISSION = ticket_dns_DnsErrorCode_QUERY_RETRANSMISSION;
  static const DnsErrorCode PROTOCOL_ERROR = ticket_dns_DnsErrorCode_PROTOCOL_ERROR;
  static inline bool DnsErrorCode_IsValid(int value) {
    return ticket_dns_DnsErrorCode_IsValid(value);
  }
  static const DnsErrorCode DnsErrorCode_MIN =
    ticket_dns_DnsErrorCode_DnsErrorCode_MIN;
  static const DnsErrorCode DnsErrorCode_MAX =
    ticket_dns_DnsErrorCode_DnsErrorCode_MAX;
  static const int DnsErrorCode_ARRAYSIZE =
    ticket_dns_DnsErrorCode_DnsErrorCode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DnsErrorCode_descriptor() {
    return ticket_dns_DnsErrorCode_descriptor();
  }
  static inline const ::std::string& DnsErrorCode_Name(DnsErrorCode value) {
    return ticket_dns_DnsErrorCode_Name(value);
  }
  static inline bool DnsErrorCode_Parse(const ::std::string& name,
      DnsErrorCode* value) {
    return ticket_dns_DnsErrorCode_Parse(name, value);
  }
  
  typedef ticket_dns_OPCode OPCode;
  static const OPCode QUERY = ticket_dns_OPCode_QUERY;
  static const OPCode IQUERY = ticket_dns_OPCode_IQUERY;
  static const OPCode STATUS = ticket_dns_OPCode_STATUS;
  static const OPCode NOTIFY = ticket_dns_OPCode_NOTIFY;
  static const OPCode UPDATE = ticket_dns_OPCode_UPDATE;
  static inline bool OPCode_IsValid(int value) {
    return ticket_dns_OPCode_IsValid(value);
  }
  static const OPCode OPCode_MIN =
    ticket_dns_OPCode_OPCode_MIN;
  static const OPCode OPCode_MAX =
    ticket_dns_OPCode_OPCode_MAX;
  static const int OPCode_ARRAYSIZE =
    ticket_dns_OPCode_OPCode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  OPCode_descriptor() {
    return ticket_dns_OPCode_descriptor();
  }
  static inline const ::std::string& OPCode_Name(OPCode value) {
    return ticket_dns_OPCode_Name(value);
  }
  static inline bool OPCode_Parse(const ::std::string& name,
      OPCode* value) {
    return ticket_dns_OPCode_Parse(name, value);
  }
  
  typedef ticket_dns_RCODE RCODE;
  static const RCODE NOERROR = ticket_dns_RCODE_NOERROR;
  static const RCODE FORMAT_ERROR = ticket_dns_RCODE_FORMAT_ERROR;
  static const RCODE SERVER_FAILURE = ticket_dns_RCODE_SERVER_FAILURE;
  static const RCODE NAME_ERROR = ticket_dns_RCODE_NAME_ERROR;
  static const RCODE NOT_IMPLEMENTED = ticket_dns_RCODE_NOT_IMPLEMENTED;
  static const RCODE REFUSED = ticket_dns_RCODE_REFUSED;
  static inline bool RCODE_IsValid(int value) {
    return ticket_dns_RCODE_IsValid(value);
  }
  static const RCODE RCODE_MIN =
    ticket_dns_RCODE_RCODE_MIN;
  static const RCODE RCODE_MAX =
    ticket_dns_RCODE_RCODE_MAX;
  static const int RCODE_ARRAYSIZE =
    ticket_dns_RCODE_RCODE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RCODE_descriptor() {
    return ticket_dns_RCODE_descriptor();
  }
  static inline const ::std::string& RCODE_Name(RCODE value) {
    return ticket_dns_RCODE_Name(value);
  }
  static inline bool RCODE_Parse(const ::std::string& name,
      RCODE* value) {
    return ticket_dns_RCODE_Parse(name, value);
  }
  
  typedef ticket_dns_Type Type;
  static const Type DNS_A = ticket_dns_Type_DNS_A;
  static const Type DNS_NS = ticket_dns_Type_DNS_NS;
  static const Type DNS_MD = ticket_dns_Type_DNS_MD;
  static const Type DNS_MF = ticket_dns_Type_DNS_MF;
  static const Type DNS_CNAME = ticket_dns_Type_DNS_CNAME;
  static const Type DNS_SOA = ticket_dns_Type_DNS_SOA;
  static const Type DNS_MB = ticket_dns_Type_DNS_MB;
  static const Type DNS_MG = ticket_dns_Type_DNS_MG;
  static const Type DNS_MR = ticket_dns_Type_DNS_MR;
  static const Type DNS_NULL_RR = ticket_dns_Type_DNS_NULL_RR;
  static const Type DNS_WKS = ticket_dns_Type_DNS_WKS;
  static const Type DNS_PTR = ticket_dns_Type_DNS_PTR;
  static const Type DNS_HINFO = ticket_dns_Type_DNS_HINFO;
  static const Type DNS_MINFO = ticket_dns_Type_DNS_MINFO;
  static const Type DNS_MX = ticket_dns_Type_DNS_MX;
  static const Type DNS_TXT = ticket_dns_Type_DNS_TXT;
  static const Type DNS_RP = ticket_dns_Type_DNS_RP;
  static const Type DNS_AFSDB = ticket_dns_Type_DNS_AFSDB;
  static const Type DNS_X25 = ticket_dns_Type_DNS_X25;
  static const Type DNS_ISDN = ticket_dns_Type_DNS_ISDN;
  static const Type DNS_RT = ticket_dns_Type_DNS_RT;
  static const Type DNS_NSAP = ticket_dns_Type_DNS_NSAP;
  static const Type DNS_NSAP_PTR = ticket_dns_Type_DNS_NSAP_PTR;
  static const Type DNS_SIG = ticket_dns_Type_DNS_SIG;
  static const Type DNS_KEY = ticket_dns_Type_DNS_KEY;
  static const Type DNS_PX = ticket_dns_Type_DNS_PX;
  static const Type DNS_GPOS = ticket_dns_Type_DNS_GPOS;
  static const Type DNS_AAAA = ticket_dns_Type_DNS_AAAA;
  static const Type DNS_LOC = ticket_dns_Type_DNS_LOC;
  static const Type DNS_NXT = ticket_dns_Type_DNS_NXT;
  static const Type DNS_EID = ticket_dns_Type_DNS_EID;
  static const Type DNS_NIMLOC = ticket_dns_Type_DNS_NIMLOC;
  static const Type DNS_SRV = ticket_dns_Type_DNS_SRV;
  static const Type DNS_ATMA = ticket_dns_Type_DNS_ATMA;
  static const Type DNS_NAPTR = ticket_dns_Type_DNS_NAPTR;
  static const Type DNS_KX = ticket_dns_Type_DNS_KX;
  static const Type DNS_CERT = ticket_dns_Type_DNS_CERT;
  static const Type DNS_A6 = ticket_dns_Type_DNS_A6;
  static const Type DNS_DNAME = ticket_dns_Type_DNS_DNAME;
  static const Type DNS_SINK = ticket_dns_Type_DNS_SINK;
  static const Type DNS_OPT = ticket_dns_Type_DNS_OPT;
  static const Type DNS_APL = ticket_dns_Type_DNS_APL;
  static const Type DNS_DS = ticket_dns_Type_DNS_DS;
  static const Type DNS_SSHFP = ticket_dns_Type_DNS_SSHFP;
  static const Type DNS_IPSECKEY = ticket_dns_Type_DNS_IPSECKEY;
  static const Type DNS_RRSIG = ticket_dns_Type_DNS_RRSIG;
  static const Type DNS_NSEC = ticket_dns_Type_DNS_NSEC;
  static const Type DNS_DNSKEY = ticket_dns_Type_DNS_DNSKEY;
  static const Type DNS_DHCID = ticket_dns_Type_DNS_DHCID;
  static const Type DNS_NSEC3 = ticket_dns_Type_DNS_NSEC3;
  static const Type DNS_NSEC3PARAM = ticket_dns_Type_DNS_NSEC3PARAM;
  static const Type DNS_HIP = ticket_dns_Type_DNS_HIP;
  static const Type DNS_NINFO = ticket_dns_Type_DNS_NINFO;
  static const Type DNS_RKEY = ticket_dns_Type_DNS_RKEY;
  static const Type DNS_SPF = ticket_dns_Type_DNS_SPF;
  static const Type DNS_UINFO = ticket_dns_Type_DNS_UINFO;
  static const Type DNS_UID = ticket_dns_Type_DNS_UID;
  static const Type DNS_GID = ticket_dns_Type_DNS_GID;
  static const Type DNS_UNSPEC = ticket_dns_Type_DNS_UNSPEC;
  static const Type DNS_TKEY = ticket_dns_Type_DNS_TKEY;
  static const Type DNS_TSIG = ticket_dns_Type_DNS_TSIG;
  static const Type DNS_IXFR = ticket_dns_Type_DNS_IXFR;
  static const Type DNS_AXFR = ticket_dns_Type_DNS_AXFR;
  static const Type DNS_MAILB = ticket_dns_Type_DNS_MAILB;
  static const Type DNS_MAILA = ticket_dns_Type_DNS_MAILA;
  static const Type DNS_ALL = ticket_dns_Type_DNS_ALL;
  static const Type DNS_TA = ticket_dns_Type_DNS_TA;
  static const Type DNS_DLV = ticket_dns_Type_DNS_DLV;
  static const Type DNS_UNKNOWN = ticket_dns_Type_DNS_UNKNOWN;
  static inline bool Type_IsValid(int value) {
    return ticket_dns_Type_IsValid(value);
  }
  static const Type Type_MIN =
    ticket_dns_Type_Type_MIN;
  static const Type Type_MAX =
    ticket_dns_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    ticket_dns_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return ticket_dns_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return ticket_dns_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return ticket_dns_Type_Parse(name, value);
  }
  
  typedef ticket_dns_DnsClass DnsClass;
  static const DnsClass IN = ticket_dns_DnsClass_IN;
  static const DnsClass CH = ticket_dns_DnsClass_CH;
  static const DnsClass HS = ticket_dns_DnsClass_HS;
  static const DnsClass QCLASS_NONE = ticket_dns_DnsClass_QCLASS_NONE;
  static const DnsClass QCLASS_ANY = ticket_dns_DnsClass_QCLASS_ANY;
  static inline bool DnsClass_IsValid(int value) {
    return ticket_dns_DnsClass_IsValid(value);
  }
  static const DnsClass DnsClass_MIN =
    ticket_dns_DnsClass_DnsClass_MIN;
  static const DnsClass DnsClass_MAX =
    ticket_dns_DnsClass_DnsClass_MAX;
  static const int DnsClass_ARRAYSIZE =
    ticket_dns_DnsClass_DnsClass_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DnsClass_descriptor() {
    return ticket_dns_DnsClass_descriptor();
  }
  static inline const ::std::string& DnsClass_Name(DnsClass value) {
    return ticket_dns_DnsClass_Name(value);
  }
  static inline bool DnsClass_Parse(const ::std::string& name,
      DnsClass* value) {
    return ticket_dns_DnsClass_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .ticket_dns.Header header = 1;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 1;
  inline const ::ticket_dns_Header& header() const;
  inline ::ticket_dns_Header* mutable_header();
  inline ::ticket_dns_Header* release_header();
  
  // optional uint64 timestamp = 2;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  inline ::google::protobuf::uint64 timestamp() const;
  inline void set_timestamp(::google::protobuf::uint64 value);
  
  // optional uint64 imei = 4;
  inline bool has_imei() const;
  inline void clear_imei();
  static const int kImeiFieldNumber = 4;
  inline ::google::protobuf::uint64 imei() const;
  inline void set_imei(::google::protobuf::uint64 value);
  
  // optional uint32 cell_plmnid = 5;
  inline bool has_cell_plmnid() const;
  inline void clear_cell_plmnid();
  static const int kCellPlmnidFieldNumber = 5;
  inline ::google::protobuf::uint32 cell_plmnid() const;
  inline void set_cell_plmnid(::google::protobuf::uint32 value);
  
  // optional uint32 cell_lac = 6;
  inline bool has_cell_lac() const;
  inline void clear_cell_lac();
  static const int kCellLacFieldNumber = 6;
  inline ::google::protobuf::uint32 cell_lac() const;
  inline void set_cell_lac(::google::protobuf::uint32 value);
  
  // optional uint32 cell_ci = 7;
  inline bool has_cell_ci() const;
  inline void clear_cell_ci();
  static const int kCellCiFieldNumber = 7;
  inline ::google::protobuf::uint32 cell_ci() const;
  inline void set_cell_ci(::google::protobuf::uint32 value);
  
  // optional uint32 cell_rac = 8;
  inline bool has_cell_rac() const;
  inline void clear_cell_rac();
  static const int kCellRacFieldNumber = 8;
  inline ::google::protobuf::uint32 cell_rac() const;
  inline void set_cell_rac(::google::protobuf::uint32 value);
  
  // optional uint32 rat = 9;
  inline bool has_rat() const;
  inline void clear_rat();
  static const int kRatFieldNumber = 9;
  inline ::google::protobuf::uint32 rat() const;
  inline void set_rat(::google::protobuf::uint32 value);
  
  // optional uint32 phy_link_id = 11;
  inline bool has_phy_link_id() const;
  inline void clear_phy_link_id();
  static const int kPhyLinkIdFieldNumber = 11;
  inline ::google::protobuf::uint32 phy_link_id() const;
  inline void set_phy_link_id(::google::protobuf::uint32 value);
  
  // optional uint32 local_dev_id = 12;
  inline bool has_local_dev_id() const;
  inline void clear_local_dev_id();
  static const int kLocalDevIdFieldNumber = 12;
  inline ::google::protobuf::uint32 local_dev_id() const;
  inline void set_local_dev_id(::google::protobuf::uint32 value);
  
  // optional uint32 remote_dev_id = 13;
  inline bool has_remote_dev_id() const;
  inline void clear_remote_dev_id();
  static const int kRemoteDevIdFieldNumber = 13;
  inline ::google::protobuf::uint32 remote_dev_id() const;
  inline void set_remote_dev_id(::google::protobuf::uint32 value);
  
  // optional uint32 tap_group_id = 14;
  inline bool has_tap_group_id() const;
  inline void clear_tap_group_id();
  static const int kTapGroupIdFieldNumber = 14;
  inline ::google::protobuf::uint32 tap_group_id() const;
  inline void set_tap_group_id(::google::protobuf::uint32 value);
  
  // optional .ticket_dns.Direction direction = 15;
  inline bool has_direction() const;
  inline void clear_direction();
  static const int kDirectionFieldNumber = 15;
  inline ::ticket_dns_Direction direction() const;
  inline void set_direction(::ticket_dns_Direction value);
  
  // optional uint32 qos = 16;
  inline bool has_qos() const;
  inline void clear_qos();
  static const int kQosFieldNumber = 16;
  inline ::google::protobuf::uint32 qos() const;
  inline void set_qos(::google::protobuf::uint32 value);
  
  // optional uint32 core_port = 30;
  inline bool has_core_port() const;
  inline void clear_core_port();
  static const int kCorePortFieldNumber = 30;
  inline ::google::protobuf::uint32 core_port() const;
  inline void set_core_port(::google::protobuf::uint32 value);
  
  // optional uint32 mobile_port = 31;
  inline bool has_mobile_port() const;
  inline void clear_mobile_port();
  static const int kMobilePortFieldNumber = 31;
  inline ::google::protobuf::uint32 mobile_port() const;
  inline void set_mobile_port(::google::protobuf::uint32 value);
  
  // optional uint32 layer = 35;
  inline bool has_layer() const;
  inline void clear_layer();
  static const int kLayerFieldNumber = 35;
  inline ::google::protobuf::uint32 layer() const;
  inline void set_layer(::google::protobuf::uint32 value);
  
  // optional uint32 signaling = 36;
  inline bool has_signaling() const;
  inline void clear_signaling();
  static const int kSignalingFieldNumber = 36;
  inline ::google::protobuf::uint32 signaling() const;
  inline void set_signaling(::google::protobuf::uint32 value);
  
  // optional .ticket_dns.DnsErrorCode error_code = 40;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 40;
  inline ::ticket_dns_DnsErrorCode error_code() const;
  inline void set_error_code(::ticket_dns_DnsErrorCode value);
  
  // optional uint64 response_time = 41;
  inline bool has_response_time() const;
  inline void clear_response_time();
  static const int kResponseTimeFieldNumber = 41;
  inline ::google::protobuf::uint64 response_time() const;
  inline void set_response_time(::google::protobuf::uint64 value);
  
  // optional uint32 session_id = 50;
  inline bool has_session_id() const;
  inline void clear_session_id();
  static const int kSessionIdFieldNumber = 50;
  inline ::google::protobuf::uint32 session_id() const;
  inline void set_session_id(::google::protobuf::uint32 value);
  
  // optional .ticket_dns.OPCode opcode = 51;
  inline bool has_opcode() const;
  inline void clear_opcode();
  static const int kOpcodeFieldNumber = 51;
  inline ::ticket_dns_OPCode opcode() const;
  inline void set_opcode(::ticket_dns_OPCode value);
  
  // optional uint32 auth_ans = 52;
  inline bool has_auth_ans() const;
  inline void clear_auth_ans();
  static const int kAuthAnsFieldNumber = 52;
  inline ::google::protobuf::uint32 auth_ans() const;
  inline void set_auth_ans(::google::protobuf::uint32 value);
  
  // optional bool trunc = 53;
  inline bool has_trunc() const;
  inline void clear_trunc();
  static const int kTruncFieldNumber = 53;
  inline bool trunc() const;
  inline void set_trunc(bool value);
  
  // optional bool rec_des = 54;
  inline bool has_rec_des() const;
  inline void clear_rec_des();
  static const int kRecDesFieldNumber = 54;
  inline bool rec_des() const;
  inline void set_rec_des(bool value);
  
  // optional bool rec_avail = 55;
  inline bool has_rec_avail() const;
  inline void clear_rec_avail();
  static const int kRecAvailFieldNumber = 55;
  inline bool rec_avail() const;
  inline void set_rec_avail(bool value);
  
  // optional .ticket_dns.RCODE rcode = 56;
  inline bool has_rcode() const;
  inline void clear_rcode();
  static const int kRcodeFieldNumber = 56;
  inline ::ticket_dns_RCODE rcode() const;
  inline void set_rcode(::ticket_dns_RCODE value);
  
  // repeated .ticket_dns.Question questions = 60;
  inline int questions_size() const;
  inline void clear_questions();
  static const int kQuestionsFieldNumber = 60;
  inline const ::ticket_dns_Question& questions(int index) const;
  inline ::ticket_dns_Question* mutable_questions(int index);
  inline ::ticket_dns_Question* add_questions();
  inline const ::google::protobuf::RepeatedPtrField< ::ticket_dns_Question >&
      questions() const;
  inline ::google::protobuf::RepeatedPtrField< ::ticket_dns_Question >*
      mutable_questions();
  
  // repeated .ticket_dns.ResourceRecord answers = 61;
  inline int answers_size() const;
  inline void clear_answers();
  static const int kAnswersFieldNumber = 61;
  inline const ::ticket_dns_ResourceRecord& answers(int index) const;
  inline ::ticket_dns_ResourceRecord* mutable_answers(int index);
  inline ::ticket_dns_ResourceRecord* add_answers();
  inline const ::google::protobuf::RepeatedPtrField< ::ticket_dns_ResourceRecord >&
      answers() const;
  inline ::google::protobuf::RepeatedPtrField< ::ticket_dns_ResourceRecord >*
      mutable_answers();
  
  // repeated .ticket_dns.ResourceRecord authorities = 62;
  inline int authorities_size() const;
  inline void clear_authorities();
  static const int kAuthoritiesFieldNumber = 62;
  inline const ::ticket_dns_ResourceRecord& authorities(int index) const;
  inline ::ticket_dns_ResourceRecord* mutable_authorities(int index);
  inline ::ticket_dns_ResourceRecord* add_authorities();
  inline const ::google::protobuf::RepeatedPtrField< ::ticket_dns_ResourceRecord >&
      authorities() const;
  inline ::google::protobuf::RepeatedPtrField< ::ticket_dns_ResourceRecord >*
      mutable_authorities();
  
  // repeated .ticket_dns.ResourceRecord additionals = 63;
  inline int additionals_size() const;
  inline void clear_additionals();
  static const int kAdditionalsFieldNumber = 63;
  inline const ::ticket_dns_ResourceRecord& additionals(int index) const;
  inline ::ticket_dns_ResourceRecord* mutable_additionals(int index);
  inline ::ticket_dns_ResourceRecord* add_additionals();
  inline const ::google::protobuf::RepeatedPtrField< ::ticket_dns_ResourceRecord >&
      additionals() const;
  inline ::google::protobuf::RepeatedPtrField< ::ticket_dns_ResourceRecord >*
      mutable_additionals();
  
  // @@protoc_insertion_point(class_scope:ticket_dns)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_imei();
  inline void clear_has_imei();
  inline void set_has_cell_plmnid();
  inline void clear_has_cell_plmnid();
  inline void set_has_cell_lac();
  inline void clear_has_cell_lac();
  inline void set_has_cell_ci();
  inline void clear_has_cell_ci();
  inline void set_has_cell_rac();
  inline void clear_has_cell_rac();
  inline void set_has_rat();
  inline void clear_has_rat();
  inline void set_has_phy_link_id();
  inline void clear_has_phy_link_id();
  inline void set_has_local_dev_id();
  inline void clear_has_local_dev_id();
  inline void set_has_remote_dev_id();
  inline void clear_has_remote_dev_id();
  inline void set_has_tap_group_id();
  inline void clear_has_tap_group_id();
  inline void set_has_direction();
  inline void clear_has_direction();
  inline void set_has_qos();
  inline void clear_has_qos();
  inline void set_has_core_port();
  inline void clear_has_core_port();
  inline void set_has_mobile_port();
  inline void clear_has_mobile_port();
  inline void set_has_layer();
  inline void clear_has_layer();
  inline void set_has_signaling();
  inline void clear_has_signaling();
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_response_time();
  inline void clear_has_response_time();
  inline void set_has_session_id();
  inline void clear_has_session_id();
  inline void set_has_opcode();
  inline void clear_has_opcode();
  inline void set_has_auth_ans();
  inline void clear_has_auth_ans();
  inline void set_has_trunc();
  inline void clear_has_trunc();
  inline void set_has_rec_des();
  inline void clear_has_rec_des();
  inline void set_has_rec_avail();
  inline void clear_has_rec_avail();
  inline void set_has_rcode();
  inline void clear_has_rcode();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::ticket_dns_Header* header_;
  ::google::protobuf::uint64 timestamp_;
  ::google::protobuf::uint64 imei_;
  ::google::protobuf::uint32 cell_plmnid_;
  ::google::protobuf::uint32 cell_lac_;
  ::google::protobuf::uint32 cell_ci_;
  ::google::protobuf::uint32 cell_rac_;
  ::google::protobuf::uint32 rat_;
  ::google::protobuf::uint32 phy_link_id_;
  ::google::protobuf::uint32 local_dev_id_;
  ::google::protobuf::uint32 remote_dev_id_;
  ::google::protobuf::uint32 tap_group_id_;
  int direction_;
  ::google::protobuf::uint32 qos_;
  ::google::protobuf::uint32 core_port_;
  ::google::protobuf::uint32 mobile_port_;
  ::google::protobuf::uint32 layer_;
  ::google::protobuf::uint32 signaling_;
  int error_code_;
  ::google::protobuf::uint64 response_time_;
  ::google::protobuf::uint32 session_id_;
  int opcode_;
  ::google::protobuf::uint32 auth_ans_;
  bool trunc_;
  bool rec_des_;
  bool rec_avail_;
  ::google::protobuf::RepeatedPtrField< ::ticket_dns_Question > questions_;
  ::google::protobuf::RepeatedPtrField< ::ticket_dns_ResourceRecord > answers_;
  ::google::protobuf::RepeatedPtrField< ::ticket_dns_ResourceRecord > authorities_;
  ::google::protobuf::RepeatedPtrField< ::ticket_dns_ResourceRecord > additionals_;
  int rcode_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(31 + 31) / 32];
  
  friend void  protobuf_AddDesc_ticket_5fdns_2eproto();
  friend void protobuf_AssignDesc_ticket_5fdns_2eproto();
  friend void protobuf_ShutdownFile_ticket_5fdns_2eproto();
  
  void InitAsDefaultInstance();
  static ticket_dns* default_instance_;
};
// ===================================================================


// ===================================================================

// ticket_dns_Header

// optional uint64 cycle_time = 1;
inline bool ticket_dns_Header::has_cycle_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ticket_dns_Header::set_has_cycle_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ticket_dns_Header::clear_has_cycle_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ticket_dns_Header::clear_cycle_time() {
  cycle_time_ = GOOGLE_ULONGLONG(0);
  clear_has_cycle_time();
}
inline ::google::protobuf::uint64 ticket_dns_Header::cycle_time() const {
  return cycle_time_;
}
inline void ticket_dns_Header::set_cycle_time(::google::protobuf::uint64 value) {
  set_has_cycle_time();
  cycle_time_ = value;
}

// optional uint64 imsi = 2;
inline bool ticket_dns_Header::has_imsi() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ticket_dns_Header::set_has_imsi() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ticket_dns_Header::clear_has_imsi() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ticket_dns_Header::clear_imsi() {
  imsi_ = GOOGLE_ULONGLONG(0);
  clear_has_imsi();
}
inline ::google::protobuf::uint64 ticket_dns_Header::imsi() const {
  return imsi_;
}
inline void ticket_dns_Header::set_imsi(::google::protobuf::uint64 value) {
  set_has_imsi();
  imsi_ = value;
}

// optional string apn = 3;
inline bool ticket_dns_Header::has_apn() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ticket_dns_Header::set_has_apn() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ticket_dns_Header::clear_has_apn() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ticket_dns_Header::clear_apn() {
  if (apn_ != &::google::protobuf::internal::kEmptyString) {
    apn_->clear();
  }
  clear_has_apn();
}
inline const ::std::string& ticket_dns_Header::apn() const {
  return *apn_;
}
inline void ticket_dns_Header::set_apn(const ::std::string& value) {
  set_has_apn();
  if (apn_ == &::google::protobuf::internal::kEmptyString) {
    apn_ = new ::std::string;
  }
  apn_->assign(value);
}
inline void ticket_dns_Header::set_apn(const char* value) {
  set_has_apn();
  if (apn_ == &::google::protobuf::internal::kEmptyString) {
    apn_ = new ::std::string;
  }
  apn_->assign(value);
}
inline void ticket_dns_Header::set_apn(const char* value, size_t size) {
  set_has_apn();
  if (apn_ == &::google::protobuf::internal::kEmptyString) {
    apn_ = new ::std::string;
  }
  apn_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ticket_dns_Header::mutable_apn() {
  set_has_apn();
  if (apn_ == &::google::protobuf::internal::kEmptyString) {
    apn_ = new ::std::string;
  }
  return apn_;
}
inline ::std::string* ticket_dns_Header::release_apn() {
  clear_has_apn();
  if (apn_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = apn_;
    apn_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 nsapi = 4;
inline bool ticket_dns_Header::has_nsapi() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ticket_dns_Header::set_has_nsapi() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ticket_dns_Header::clear_has_nsapi() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ticket_dns_Header::clear_nsapi() {
  nsapi_ = 0u;
  clear_has_nsapi();
}
inline ::google::protobuf::uint32 ticket_dns_Header::nsapi() const {
  return nsapi_;
}
inline void ticket_dns_Header::set_nsapi(::google::protobuf::uint32 value) {
  set_has_nsapi();
  nsapi_ = value;
}

// optional uint64 ctx_start_ts = 5;
inline bool ticket_dns_Header::has_ctx_start_ts() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ticket_dns_Header::set_has_ctx_start_ts() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ticket_dns_Header::clear_has_ctx_start_ts() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ticket_dns_Header::clear_ctx_start_ts() {
  ctx_start_ts_ = GOOGLE_ULONGLONG(0);
  clear_has_ctx_start_ts();
}
inline ::google::protobuf::uint64 ticket_dns_Header::ctx_start_ts() const {
  return ctx_start_ts_;
}
inline void ticket_dns_Header::set_ctx_start_ts(::google::protobuf::uint64 value) {
  set_has_ctx_start_ts();
  ctx_start_ts_ = value;
}

// optional uint32 server_ip = 6;
inline bool ticket_dns_Header::has_server_ip() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ticket_dns_Header::set_has_server_ip() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ticket_dns_Header::clear_has_server_ip() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ticket_dns_Header::clear_server_ip() {
  server_ip_ = 0u;
  clear_has_server_ip();
}
inline ::google::protobuf::uint32 ticket_dns_Header::server_ip() const {
  return server_ip_;
}
inline void ticket_dns_Header::set_server_ip(::google::protobuf::uint32 value) {
  set_has_server_ip();
  server_ip_ = value;
}

// -------------------------------------------------------------------

// ticket_dns_ResourceRecord

// optional string name = 1;
inline bool ticket_dns_ResourceRecord::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ticket_dns_ResourceRecord::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ticket_dns_ResourceRecord::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ticket_dns_ResourceRecord::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ticket_dns_ResourceRecord::name() const {
  return *name_;
}
inline void ticket_dns_ResourceRecord::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ticket_dns_ResourceRecord::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ticket_dns_ResourceRecord::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ticket_dns_ResourceRecord::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ticket_dns_ResourceRecord::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .ticket_dns.Type type = 2;
inline bool ticket_dns_ResourceRecord::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ticket_dns_ResourceRecord::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ticket_dns_ResourceRecord::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ticket_dns_ResourceRecord::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::ticket_dns_Type ticket_dns_ResourceRecord::type() const {
  return static_cast< ::ticket_dns_Type >(type_);
}
inline void ticket_dns_ResourceRecord::set_type(::ticket_dns_Type value) {
  GOOGLE_DCHECK(::ticket_dns_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .ticket_dns.DnsClass dns_class = 3;
inline bool ticket_dns_ResourceRecord::has_dns_class() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ticket_dns_ResourceRecord::set_has_dns_class() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ticket_dns_ResourceRecord::clear_has_dns_class() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ticket_dns_ResourceRecord::clear_dns_class() {
  dns_class_ = 1;
  clear_has_dns_class();
}
inline ::ticket_dns_DnsClass ticket_dns_ResourceRecord::dns_class() const {
  return static_cast< ::ticket_dns_DnsClass >(dns_class_);
}
inline void ticket_dns_ResourceRecord::set_dns_class(::ticket_dns_DnsClass value) {
  GOOGLE_DCHECK(::ticket_dns_DnsClass_IsValid(value));
  set_has_dns_class();
  dns_class_ = value;
}

// optional uint32 ttl = 4;
inline bool ticket_dns_ResourceRecord::has_ttl() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ticket_dns_ResourceRecord::set_has_ttl() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ticket_dns_ResourceRecord::clear_has_ttl() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ticket_dns_ResourceRecord::clear_ttl() {
  ttl_ = 0u;
  clear_has_ttl();
}
inline ::google::protobuf::uint32 ticket_dns_ResourceRecord::ttl() const {
  return ttl_;
}
inline void ticket_dns_ResourceRecord::set_ttl(::google::protobuf::uint32 value) {
  set_has_ttl();
  ttl_ = value;
}

// optional bytes rdata = 5;
inline bool ticket_dns_ResourceRecord::has_rdata() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ticket_dns_ResourceRecord::set_has_rdata() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ticket_dns_ResourceRecord::clear_has_rdata() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ticket_dns_ResourceRecord::clear_rdata() {
  if (rdata_ != &::google::protobuf::internal::kEmptyString) {
    rdata_->clear();
  }
  clear_has_rdata();
}
inline const ::std::string& ticket_dns_ResourceRecord::rdata() const {
  return *rdata_;
}
inline void ticket_dns_ResourceRecord::set_rdata(const ::std::string& value) {
  set_has_rdata();
  if (rdata_ == &::google::protobuf::internal::kEmptyString) {
    rdata_ = new ::std::string;
  }
  rdata_->assign(value);
}
inline void ticket_dns_ResourceRecord::set_rdata(const char* value) {
  set_has_rdata();
  if (rdata_ == &::google::protobuf::internal::kEmptyString) {
    rdata_ = new ::std::string;
  }
  rdata_->assign(value);
}
inline void ticket_dns_ResourceRecord::set_rdata(const void* value, size_t size) {
  set_has_rdata();
  if (rdata_ == &::google::protobuf::internal::kEmptyString) {
    rdata_ = new ::std::string;
  }
  rdata_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ticket_dns_ResourceRecord::mutable_rdata() {
  set_has_rdata();
  if (rdata_ == &::google::protobuf::internal::kEmptyString) {
    rdata_ = new ::std::string;
  }
  return rdata_;
}
inline ::std::string* ticket_dns_ResourceRecord::release_rdata() {
  clear_has_rdata();
  if (rdata_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rdata_;
    rdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// ticket_dns_Question

// optional .ticket_dns.Type type = 1;
inline bool ticket_dns_Question::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ticket_dns_Question::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ticket_dns_Question::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ticket_dns_Question::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::ticket_dns_Type ticket_dns_Question::type() const {
  return static_cast< ::ticket_dns_Type >(type_);
}
inline void ticket_dns_Question::set_type(::ticket_dns_Type value) {
  GOOGLE_DCHECK(::ticket_dns_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .ticket_dns.DnsClass dns_class = 2;
inline bool ticket_dns_Question::has_dns_class() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ticket_dns_Question::set_has_dns_class() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ticket_dns_Question::clear_has_dns_class() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ticket_dns_Question::clear_dns_class() {
  dns_class_ = 1;
  clear_has_dns_class();
}
inline ::ticket_dns_DnsClass ticket_dns_Question::dns_class() const {
  return static_cast< ::ticket_dns_DnsClass >(dns_class_);
}
inline void ticket_dns_Question::set_dns_class(::ticket_dns_DnsClass value) {
  GOOGLE_DCHECK(::ticket_dns_DnsClass_IsValid(value));
  set_has_dns_class();
  dns_class_ = value;
}

// optional string name = 3;
inline bool ticket_dns_Question::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ticket_dns_Question::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ticket_dns_Question::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ticket_dns_Question::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ticket_dns_Question::name() const {
  return *name_;
}
inline void ticket_dns_Question::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ticket_dns_Question::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ticket_dns_Question::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ticket_dns_Question::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ticket_dns_Question::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .ticket_dns.ResourceRecord answer = 32;
inline int ticket_dns_Question::answer_size() const {
  return answer_.size();
}
inline void ticket_dns_Question::clear_answer() {
  answer_.Clear();
}
inline const ::ticket_dns_ResourceRecord& ticket_dns_Question::answer(int index) const {
  return answer_.Get(index);
}
inline ::ticket_dns_ResourceRecord* ticket_dns_Question::mutable_answer(int index) {
  return answer_.Mutable(index);
}
inline ::ticket_dns_ResourceRecord* ticket_dns_Question::add_answer() {
  return answer_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ticket_dns_ResourceRecord >&
ticket_dns_Question::answer() const {
  return answer_;
}
inline ::google::protobuf::RepeatedPtrField< ::ticket_dns_ResourceRecord >*
ticket_dns_Question::mutable_answer() {
  return &answer_;
}

// repeated .ticket_dns.ResourceRecord authority = 33;
inline int ticket_dns_Question::authority_size() const {
  return authority_.size();
}
inline void ticket_dns_Question::clear_authority() {
  authority_.Clear();
}
inline const ::ticket_dns_ResourceRecord& ticket_dns_Question::authority(int index) const {
  return authority_.Get(index);
}
inline ::ticket_dns_ResourceRecord* ticket_dns_Question::mutable_authority(int index) {
  return authority_.Mutable(index);
}
inline ::ticket_dns_ResourceRecord* ticket_dns_Question::add_authority() {
  return authority_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ticket_dns_ResourceRecord >&
ticket_dns_Question::authority() const {
  return authority_;
}
inline ::google::protobuf::RepeatedPtrField< ::ticket_dns_ResourceRecord >*
ticket_dns_Question::mutable_authority() {
  return &authority_;
}

// repeated .ticket_dns.ResourceRecord additional = 34;
inline int ticket_dns_Question::additional_size() const {
  return additional_.size();
}
inline void ticket_dns_Question::clear_additional() {
  additional_.Clear();
}
inline const ::ticket_dns_ResourceRecord& ticket_dns_Question::additional(int index) const {
  return additional_.Get(index);
}
inline ::ticket_dns_ResourceRecord* ticket_dns_Question::mutable_additional(int index) {
  return additional_.Mutable(index);
}
inline ::ticket_dns_ResourceRecord* ticket_dns_Question::add_additional() {
  return additional_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ticket_dns_ResourceRecord >&
ticket_dns_Question::additional() const {
  return additional_;
}
inline ::google::protobuf::RepeatedPtrField< ::ticket_dns_ResourceRecord >*
ticket_dns_Question::mutable_additional() {
  return &additional_;
}

// -------------------------------------------------------------------

// ticket_dns

// optional .ticket_dns.Header header = 1;
inline bool ticket_dns::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ticket_dns::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ticket_dns::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ticket_dns::clear_header() {
  if (header_ != NULL) header_->::ticket_dns_Header::Clear();
  clear_has_header();
}
inline const ::ticket_dns_Header& ticket_dns::header() const {
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::ticket_dns_Header* ticket_dns::mutable_header() {
  set_has_header();
  if (header_ == NULL) header_ = new ::ticket_dns_Header;
  return header_;
}
inline ::ticket_dns_Header* ticket_dns::release_header() {
  clear_has_header();
  ::ticket_dns_Header* temp = header_;
  header_ = NULL;
  return temp;
}

// optional uint64 timestamp = 2;
inline bool ticket_dns::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ticket_dns::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ticket_dns::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ticket_dns::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::uint64 ticket_dns::timestamp() const {
  return timestamp_;
}
inline void ticket_dns::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
}

// optional uint64 imei = 4;
inline bool ticket_dns::has_imei() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ticket_dns::set_has_imei() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ticket_dns::clear_has_imei() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ticket_dns::clear_imei() {
  imei_ = GOOGLE_ULONGLONG(0);
  clear_has_imei();
}
inline ::google::protobuf::uint64 ticket_dns::imei() const {
  return imei_;
}
inline void ticket_dns::set_imei(::google::protobuf::uint64 value) {
  set_has_imei();
  imei_ = value;
}

// optional uint32 cell_plmnid = 5;
inline bool ticket_dns::has_cell_plmnid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ticket_dns::set_has_cell_plmnid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ticket_dns::clear_has_cell_plmnid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ticket_dns::clear_cell_plmnid() {
  cell_plmnid_ = 0u;
  clear_has_cell_plmnid();
}
inline ::google::protobuf::uint32 ticket_dns::cell_plmnid() const {
  return cell_plmnid_;
}
inline void ticket_dns::set_cell_plmnid(::google::protobuf::uint32 value) {
  set_has_cell_plmnid();
  cell_plmnid_ = value;
}

// optional uint32 cell_lac = 6;
inline bool ticket_dns::has_cell_lac() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ticket_dns::set_has_cell_lac() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ticket_dns::clear_has_cell_lac() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ticket_dns::clear_cell_lac() {
  cell_lac_ = 0u;
  clear_has_cell_lac();
}
inline ::google::protobuf::uint32 ticket_dns::cell_lac() const {
  return cell_lac_;
}
inline void ticket_dns::set_cell_lac(::google::protobuf::uint32 value) {
  set_has_cell_lac();
  cell_lac_ = value;
}

// optional uint32 cell_ci = 7;
inline bool ticket_dns::has_cell_ci() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ticket_dns::set_has_cell_ci() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ticket_dns::clear_has_cell_ci() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ticket_dns::clear_cell_ci() {
  cell_ci_ = 0u;
  clear_has_cell_ci();
}
inline ::google::protobuf::uint32 ticket_dns::cell_ci() const {
  return cell_ci_;
}
inline void ticket_dns::set_cell_ci(::google::protobuf::uint32 value) {
  set_has_cell_ci();
  cell_ci_ = value;
}

// optional uint32 cell_rac = 8;
inline bool ticket_dns::has_cell_rac() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ticket_dns::set_has_cell_rac() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ticket_dns::clear_has_cell_rac() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ticket_dns::clear_cell_rac() {
  cell_rac_ = 0u;
  clear_has_cell_rac();
}
inline ::google::protobuf::uint32 ticket_dns::cell_rac() const {
  return cell_rac_;
}
inline void ticket_dns::set_cell_rac(::google::protobuf::uint32 value) {
  set_has_cell_rac();
  cell_rac_ = value;
}

// optional uint32 rat = 9;
inline bool ticket_dns::has_rat() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ticket_dns::set_has_rat() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ticket_dns::clear_has_rat() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ticket_dns::clear_rat() {
  rat_ = 0u;
  clear_has_rat();
}
inline ::google::protobuf::uint32 ticket_dns::rat() const {
  return rat_;
}
inline void ticket_dns::set_rat(::google::protobuf::uint32 value) {
  set_has_rat();
  rat_ = value;
}

// optional uint32 phy_link_id = 11;
inline bool ticket_dns::has_phy_link_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ticket_dns::set_has_phy_link_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ticket_dns::clear_has_phy_link_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ticket_dns::clear_phy_link_id() {
  phy_link_id_ = 0u;
  clear_has_phy_link_id();
}
inline ::google::protobuf::uint32 ticket_dns::phy_link_id() const {
  return phy_link_id_;
}
inline void ticket_dns::set_phy_link_id(::google::protobuf::uint32 value) {
  set_has_phy_link_id();
  phy_link_id_ = value;
}

// optional uint32 local_dev_id = 12;
inline bool ticket_dns::has_local_dev_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ticket_dns::set_has_local_dev_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ticket_dns::clear_has_local_dev_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ticket_dns::clear_local_dev_id() {
  local_dev_id_ = 0u;
  clear_has_local_dev_id();
}
inline ::google::protobuf::uint32 ticket_dns::local_dev_id() const {
  return local_dev_id_;
}
inline void ticket_dns::set_local_dev_id(::google::protobuf::uint32 value) {
  set_has_local_dev_id();
  local_dev_id_ = value;
}

// optional uint32 remote_dev_id = 13;
inline bool ticket_dns::has_remote_dev_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ticket_dns::set_has_remote_dev_id() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ticket_dns::clear_has_remote_dev_id() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ticket_dns::clear_remote_dev_id() {
  remote_dev_id_ = 0u;
  clear_has_remote_dev_id();
}
inline ::google::protobuf::uint32 ticket_dns::remote_dev_id() const {
  return remote_dev_id_;
}
inline void ticket_dns::set_remote_dev_id(::google::protobuf::uint32 value) {
  set_has_remote_dev_id();
  remote_dev_id_ = value;
}

// optional uint32 tap_group_id = 14;
inline bool ticket_dns::has_tap_group_id() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ticket_dns::set_has_tap_group_id() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ticket_dns::clear_has_tap_group_id() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ticket_dns::clear_tap_group_id() {
  tap_group_id_ = 0u;
  clear_has_tap_group_id();
}
inline ::google::protobuf::uint32 ticket_dns::tap_group_id() const {
  return tap_group_id_;
}
inline void ticket_dns::set_tap_group_id(::google::protobuf::uint32 value) {
  set_has_tap_group_id();
  tap_group_id_ = value;
}

// optional .ticket_dns.Direction direction = 15;
inline bool ticket_dns::has_direction() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ticket_dns::set_has_direction() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ticket_dns::clear_has_direction() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ticket_dns::clear_direction() {
  direction_ = 0;
  clear_has_direction();
}
inline ::ticket_dns_Direction ticket_dns::direction() const {
  return static_cast< ::ticket_dns_Direction >(direction_);
}
inline void ticket_dns::set_direction(::ticket_dns_Direction value) {
  GOOGLE_DCHECK(::ticket_dns_Direction_IsValid(value));
  set_has_direction();
  direction_ = value;
}

// optional uint32 qos = 16;
inline bool ticket_dns::has_qos() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ticket_dns::set_has_qos() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ticket_dns::clear_has_qos() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ticket_dns::clear_qos() {
  qos_ = 0u;
  clear_has_qos();
}
inline ::google::protobuf::uint32 ticket_dns::qos() const {
  return qos_;
}
inline void ticket_dns::set_qos(::google::protobuf::uint32 value) {
  set_has_qos();
  qos_ = value;
}

// optional uint32 core_port = 30;
inline bool ticket_dns::has_core_port() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ticket_dns::set_has_core_port() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ticket_dns::clear_has_core_port() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ticket_dns::clear_core_port() {
  core_port_ = 0u;
  clear_has_core_port();
}
inline ::google::protobuf::uint32 ticket_dns::core_port() const {
  return core_port_;
}
inline void ticket_dns::set_core_port(::google::protobuf::uint32 value) {
  set_has_core_port();
  core_port_ = value;
}

// optional uint32 mobile_port = 31;
inline bool ticket_dns::has_mobile_port() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ticket_dns::set_has_mobile_port() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ticket_dns::clear_has_mobile_port() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ticket_dns::clear_mobile_port() {
  mobile_port_ = 0u;
  clear_has_mobile_port();
}
inline ::google::protobuf::uint32 ticket_dns::mobile_port() const {
  return mobile_port_;
}
inline void ticket_dns::set_mobile_port(::google::protobuf::uint32 value) {
  set_has_mobile_port();
  mobile_port_ = value;
}

// optional uint32 layer = 35;
inline bool ticket_dns::has_layer() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ticket_dns::set_has_layer() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ticket_dns::clear_has_layer() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ticket_dns::clear_layer() {
  layer_ = 0u;
  clear_has_layer();
}
inline ::google::protobuf::uint32 ticket_dns::layer() const {
  return layer_;
}
inline void ticket_dns::set_layer(::google::protobuf::uint32 value) {
  set_has_layer();
  layer_ = value;
}

// optional uint32 signaling = 36;
inline bool ticket_dns::has_signaling() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ticket_dns::set_has_signaling() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ticket_dns::clear_has_signaling() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ticket_dns::clear_signaling() {
  signaling_ = 0u;
  clear_has_signaling();
}
inline ::google::protobuf::uint32 ticket_dns::signaling() const {
  return signaling_;
}
inline void ticket_dns::set_signaling(::google::protobuf::uint32 value) {
  set_has_signaling();
  signaling_ = value;
}

// optional .ticket_dns.DnsErrorCode error_code = 40;
inline bool ticket_dns::has_error_code() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ticket_dns::set_has_error_code() {
  _has_bits_[0] |= 0x00040000u;
}
inline void ticket_dns::clear_has_error_code() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void ticket_dns::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::ticket_dns_DnsErrorCode ticket_dns::error_code() const {
  return static_cast< ::ticket_dns_DnsErrorCode >(error_code_);
}
inline void ticket_dns::set_error_code(::ticket_dns_DnsErrorCode value) {
  GOOGLE_DCHECK(::ticket_dns_DnsErrorCode_IsValid(value));
  set_has_error_code();
  error_code_ = value;
}

// optional uint64 response_time = 41;
inline bool ticket_dns::has_response_time() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void ticket_dns::set_has_response_time() {
  _has_bits_[0] |= 0x00080000u;
}
inline void ticket_dns::clear_has_response_time() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void ticket_dns::clear_response_time() {
  response_time_ = GOOGLE_ULONGLONG(0);
  clear_has_response_time();
}
inline ::google::protobuf::uint64 ticket_dns::response_time() const {
  return response_time_;
}
inline void ticket_dns::set_response_time(::google::protobuf::uint64 value) {
  set_has_response_time();
  response_time_ = value;
}

// optional uint32 session_id = 50;
inline bool ticket_dns::has_session_id() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void ticket_dns::set_has_session_id() {
  _has_bits_[0] |= 0x00100000u;
}
inline void ticket_dns::clear_has_session_id() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void ticket_dns::clear_session_id() {
  session_id_ = 0u;
  clear_has_session_id();
}
inline ::google::protobuf::uint32 ticket_dns::session_id() const {
  return session_id_;
}
inline void ticket_dns::set_session_id(::google::protobuf::uint32 value) {
  set_has_session_id();
  session_id_ = value;
}

// optional .ticket_dns.OPCode opcode = 51;
inline bool ticket_dns::has_opcode() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void ticket_dns::set_has_opcode() {
  _has_bits_[0] |= 0x00200000u;
}
inline void ticket_dns::clear_has_opcode() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void ticket_dns::clear_opcode() {
  opcode_ = 0;
  clear_has_opcode();
}
inline ::ticket_dns_OPCode ticket_dns::opcode() const {
  return static_cast< ::ticket_dns_OPCode >(opcode_);
}
inline void ticket_dns::set_opcode(::ticket_dns_OPCode value) {
  GOOGLE_DCHECK(::ticket_dns_OPCode_IsValid(value));
  set_has_opcode();
  opcode_ = value;
}

// optional uint32 auth_ans = 52;
inline bool ticket_dns::has_auth_ans() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void ticket_dns::set_has_auth_ans() {
  _has_bits_[0] |= 0x00400000u;
}
inline void ticket_dns::clear_has_auth_ans() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void ticket_dns::clear_auth_ans() {
  auth_ans_ = 0u;
  clear_has_auth_ans();
}
inline ::google::protobuf::uint32 ticket_dns::auth_ans() const {
  return auth_ans_;
}
inline void ticket_dns::set_auth_ans(::google::protobuf::uint32 value) {
  set_has_auth_ans();
  auth_ans_ = value;
}

// optional bool trunc = 53;
inline bool ticket_dns::has_trunc() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void ticket_dns::set_has_trunc() {
  _has_bits_[0] |= 0x00800000u;
}
inline void ticket_dns::clear_has_trunc() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void ticket_dns::clear_trunc() {
  trunc_ = false;
  clear_has_trunc();
}
inline bool ticket_dns::trunc() const {
  return trunc_;
}
inline void ticket_dns::set_trunc(bool value) {
  set_has_trunc();
  trunc_ = value;
}

// optional bool rec_des = 54;
inline bool ticket_dns::has_rec_des() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void ticket_dns::set_has_rec_des() {
  _has_bits_[0] |= 0x01000000u;
}
inline void ticket_dns::clear_has_rec_des() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void ticket_dns::clear_rec_des() {
  rec_des_ = false;
  clear_has_rec_des();
}
inline bool ticket_dns::rec_des() const {
  return rec_des_;
}
inline void ticket_dns::set_rec_des(bool value) {
  set_has_rec_des();
  rec_des_ = value;
}

// optional bool rec_avail = 55;
inline bool ticket_dns::has_rec_avail() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void ticket_dns::set_has_rec_avail() {
  _has_bits_[0] |= 0x02000000u;
}
inline void ticket_dns::clear_has_rec_avail() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void ticket_dns::clear_rec_avail() {
  rec_avail_ = false;
  clear_has_rec_avail();
}
inline bool ticket_dns::rec_avail() const {
  return rec_avail_;
}
inline void ticket_dns::set_rec_avail(bool value) {
  set_has_rec_avail();
  rec_avail_ = value;
}

// optional .ticket_dns.RCODE rcode = 56;
inline bool ticket_dns::has_rcode() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void ticket_dns::set_has_rcode() {
  _has_bits_[0] |= 0x04000000u;
}
inline void ticket_dns::clear_has_rcode() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void ticket_dns::clear_rcode() {
  rcode_ = 0;
  clear_has_rcode();
}
inline ::ticket_dns_RCODE ticket_dns::rcode() const {
  return static_cast< ::ticket_dns_RCODE >(rcode_);
}
inline void ticket_dns::set_rcode(::ticket_dns_RCODE value) {
  GOOGLE_DCHECK(::ticket_dns_RCODE_IsValid(value));
  set_has_rcode();
  rcode_ = value;
}

// repeated .ticket_dns.Question questions = 60;
inline int ticket_dns::questions_size() const {
  return questions_.size();
}
inline void ticket_dns::clear_questions() {
  questions_.Clear();
}
inline const ::ticket_dns_Question& ticket_dns::questions(int index) const {
  return questions_.Get(index);
}
inline ::ticket_dns_Question* ticket_dns::mutable_questions(int index) {
  return questions_.Mutable(index);
}
inline ::ticket_dns_Question* ticket_dns::add_questions() {
  return questions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ticket_dns_Question >&
ticket_dns::questions() const {
  return questions_;
}
inline ::google::protobuf::RepeatedPtrField< ::ticket_dns_Question >*
ticket_dns::mutable_questions() {
  return &questions_;
}

// repeated .ticket_dns.ResourceRecord answers = 61;
inline int ticket_dns::answers_size() const {
  return answers_.size();
}
inline void ticket_dns::clear_answers() {
  answers_.Clear();
}
inline const ::ticket_dns_ResourceRecord& ticket_dns::answers(int index) const {
  return answers_.Get(index);
}
inline ::ticket_dns_ResourceRecord* ticket_dns::mutable_answers(int index) {
  return answers_.Mutable(index);
}
inline ::ticket_dns_ResourceRecord* ticket_dns::add_answers() {
  return answers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ticket_dns_ResourceRecord >&
ticket_dns::answers() const {
  return answers_;
}
inline ::google::protobuf::RepeatedPtrField< ::ticket_dns_ResourceRecord >*
ticket_dns::mutable_answers() {
  return &answers_;
}

// repeated .ticket_dns.ResourceRecord authorities = 62;
inline int ticket_dns::authorities_size() const {
  return authorities_.size();
}
inline void ticket_dns::clear_authorities() {
  authorities_.Clear();
}
inline const ::ticket_dns_ResourceRecord& ticket_dns::authorities(int index) const {
  return authorities_.Get(index);
}
inline ::ticket_dns_ResourceRecord* ticket_dns::mutable_authorities(int index) {
  return authorities_.Mutable(index);
}
inline ::ticket_dns_ResourceRecord* ticket_dns::add_authorities() {
  return authorities_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ticket_dns_ResourceRecord >&
ticket_dns::authorities() const {
  return authorities_;
}
inline ::google::protobuf::RepeatedPtrField< ::ticket_dns_ResourceRecord >*
ticket_dns::mutable_authorities() {
  return &authorities_;
}

// repeated .ticket_dns.ResourceRecord additionals = 63;
inline int ticket_dns::additionals_size() const {
  return additionals_.size();
}
inline void ticket_dns::clear_additionals() {
  additionals_.Clear();
}
inline const ::ticket_dns_ResourceRecord& ticket_dns::additionals(int index) const {
  return additionals_.Get(index);
}
inline ::ticket_dns_ResourceRecord* ticket_dns::mutable_additionals(int index) {
  return additionals_.Mutable(index);
}
inline ::ticket_dns_ResourceRecord* ticket_dns::add_additionals() {
  return additionals_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ticket_dns_ResourceRecord >&
ticket_dns::additionals() const {
  return additionals_;
}
inline ::google::protobuf::RepeatedPtrField< ::ticket_dns_ResourceRecord >*
ticket_dns::mutable_additionals() {
  return &additionals_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ticket_dns_Direction>() {
  return ::ticket_dns_Direction_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ticket_dns_DnsErrorCode>() {
  return ::ticket_dns_DnsErrorCode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ticket_dns_OPCode>() {
  return ::ticket_dns_OPCode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ticket_dns_RCODE>() {
  return ::ticket_dns_RCODE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ticket_dns_Type>() {
  return ::ticket_dns_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ticket_dns_DnsClass>() {
  return ::ticket_dns_DnsClass_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ticket_5fdns_2eproto__INCLUDED
